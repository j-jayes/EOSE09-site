{
  "hash": "86aa896bbfee56ce68134872d45b7d0f",
  "result": {
    "markdown": "---\ntitle: \"Stata Lab Hints: Basic Graphs\"\nauthor: Jonathan Jayes\ndate: 2023-02-06\nformat:\n  html:\n    code-overflow: wrap\n  pdf:\n    documentclass: scrreprt\n    toc: true\nexecute: \n  eval: false\n  echo: true\nimage: \"Lab-hints-resources/preview.png\"\n---\n\n\n\n## Intro\n\nFor your projects (ðŸ“… due March 3rd), you can use any kind of plots in addition to the maps we have learned to draw in the first lab.\n\nIn this little note, I take you through drawing scatter plots, line plots and bar plots.\n\nI have taken inspiration from [GermÃ¡n RodrÃ­guez' notes](https://grodri.github.io/stata/graphics).\n\n## Graphing\n\nLet's get started!\n\n### Load data\n\nAs before we will use the `regional_dataset.dta` file saved in our working directories.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncd \"C:/Users/User/Documents/Recon/EOSE09/stata_files/\" # set your directory\nuse regional_dataset, clear\n```\n:::\n\n\n\n### Scatter plots\n\nScatterplots show the extent of correlation between two variables (on the x- and y-axes). Including colour and shaped markers can allow us to compare groups of data.\n\nWe can draw a basic scatter plot in stata:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngraph twoway scatter regional_gdp_cap_1990 year if region == \"Stockholm\"\n```\n:::\n\n\n\n\n![](Lab-hints-resources/basic_scatter.png)\n\nWe can add a line of best fit with a quadratic curve by using the `qfit` or **quadratic fit** command. Notice that we are layering two plots on one set of axes (the scatter plot and the line of best fit) with the `twoway` command. In addition we add some labels and format the y-axis.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngraph twoway (scatter regional_gdp_cap_1990 year if region == \"Stockholm\") ///\n             (qfit regional_gdp_cap_1990 year if region == \"Stockholm\") ///\n        \t\t\t ,legend(order(1 \"Stockholm\" 2 \"Quadratic fit\")) ///\n        \t\t\t ylabel(,format(%9.0fc)) ///\n        \t\t\t ytitle(Regional GDP per capita in 1990 International Dollars)\n```\n:::\n\n\n\n![](Lab-hints-resources/qfit_scatter.png)\n\n### Line plots\n\nLine plots are great for showing trends over time.\n\nWe can draw a basic line plot with the `line` command in Stata:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nline regional_gdp_cap_1990 year if region == \"Stockholm\"\t\t \n```\n:::\n\n\n\n![](Lab-hints-resources/basic_line.png)\n\nAgain we can use the `twoway` command to plot different regions on our line plot. The legend provided by Stata is not super helpful, either in its information or placement.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngraph twoway (line regional_gdp_cap_1990 year if region == \"Stockholm\") ///\n             (line regional_gdp_cap_1990 year if region == \"Sydsverige\") ///\n\t\t\t       (line regional_gdp_cap_1990 year if region == \"VÃ¤stsverige\")\n```\n:::\n\n\n\n![](Lab-hints-resources/twoway_line.png)\n\nWe can change that by specifying labels in our legend with the `legend` option and placement with the `pos` option.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngraph twoway (line regional_gdp_cap_1990 year if region == \"Stockholm\") ///\n             (line regional_gdp_cap_1990 year if region == \"Sydsverige\") ///\n\t\t\t       (line regional_gdp_cap_1990 year if region == \"VÃ¤stsverige\") ///\n      \t\t\t  ,legend(order(1 \"Stockholm\" 2 \"Sydsverige\" 3 \"VÃ¤stsverige\") /// \n      \t\t\t  ring(0) pos(5)) ylabel(,format(%9.0fc))\n```\n:::\n\n\n\n![](Lab-hints-resources/twoway_line_formatted.png)\n\n### Bar plots\n\nBar plots are a great way to show compaisons between groups.\n\nFirst we create a variable to select three regions in our plot with the `gen` command:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngen include_in_bar = .\nreplace include_in_bar = 1 if region == \"London Counties\" | region == \"Wales\" | region == \"Northern Ireland\" \n```\n:::\n\n\n\nThen we can draw a basic bar graph. Here the variables we want to compare are named before the `if` command specifies which segment of the data we want to use. The `over` option tells Stata that we want to use of bar graph to compare different regions.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngraph bar employment_share_agriculture employment_share_industry ///\nemployment_share_services if include_in_bar == 1 & year == 1900 ///\n,over(region) \n```\n:::\n\n\n\n![](Lab-hints-resources/basic_bar.png)\n\nWe can turn this into a stacked bar graph that makes it easier to compare the proportions between regions (as by definition they must sum to 100 percent) with the `stack` option.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngraph bar employment_share_agriculture employment_share_industry ///\nemployment_share_services if include_in_bar == 1 & year == 1900 ///\n,over(region) stack \n```\n:::\n\n\n\n![](Lab-hints-resources/stacked_bar.png)\n\nFinally we can add some nice labels, a y-axis that makes sense and a title:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngraph bar employment_share_agriculture employment_share_industry ///\nemployment_share_services if include_in_bar == 1 & year == 1900 ///\n    ,over(region) stack title(Employment Composition in 1900) ///\n    legend(order(1 \"Agriculture\" 2 \"Industry\" 3 \"Services\")) ///\n    ylab(0 \"0\" .25 \"25\" .5 \"50\" .75 \"75\" 1 \"100\") ///\n    ytitle(\"Employment share (percent)\")\n```\n:::\n\n\n\n![](Lab-hints-resources/stacked_bar_formatted.png)\n\nI hope that this is useful!\n\n## Tip on executing code in `.do` files\n\nTo execute a command in Stata you can highlight the code and then run it with the **execute section** button, or click `ctrl + d` on windows or `cmd + d` on mac. \n\n![](Lab-hints-resources/execute.PNG)\n\nIf you choose to copy the code from the `.do` file into the console, you need to remove the linebreak indicators (`///`) which tell Stata that the code line continues after the break.\n",
    "supporting": [
      "Lab-hints-graphs_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": null,
    "postProcess": false
  }
}