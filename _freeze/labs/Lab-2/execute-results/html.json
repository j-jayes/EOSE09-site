{
  "hash": "af1cc6778fd8d0ed180254010069bd86",
  "result": {
    "markdown": "---\ntitle: \"Stata Lab 2 Mapping Growth: Across Space and Time\"\nauthor: Vinzent Ostermeyer, adapted Jonathan Jayes\ndate: 2023-02-17\nformat:\n  # pdf:\n  #   toc: true\n  #   colorlinks: true\n  html:\n    code-overflow: wrap\nexecute: \n  eval: false\n  echo: true\nimage: \"Lab-2-resources/preview.png\"\n---\n\n\n## Purpose\n\nIn this lab we will look at comparing maps across time, dealing with breaks, experimenting with colours, loops, and labels.\n\n### Set up\n\nAs before we will use the regional dataset. Be sure to save this do-file in the same directory as the dataset, and so set your working directory correctly. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nclear all\nset more off\n\nuse regional_dataset, clear\n```\n:::\n\n\n## Comparing maps over time\n\nMaking breaks in the right place is difficult! In the first plot we show regional GDP per capita from 1950. In the second, the same series is shown but for the year 2010. As you can see, because we have set the top level of the breaks too low, only Calabria in Southern Italy shows up on our map!\n\n\n::: {.cell}\n\n```{.r .cell-code}\nspmap regional_gdp_cap_1990 using \"nutscoord.dta\" if year == 1950, id(_ID) fcolor(Blues2) legend(pos(9)) legstyle(2) \n\ttitle(\"Regional GDP per Capita - 1950\", size(medium)) \n\tosize(0.02 ..) ocolor(white ..) \n\tclmethod(custom) clbreaks(0 (2000) 12000)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nspmap regional_gdp_cap_1990 using \"nutscoord.dta\" if year == 2010, id(_ID) fcolor(Blues2) legend(pos(9)) legstyle(2) \n\ttitle(\"Regional GDP per Capita - 2010\", size(medium)) \n\tosize(0.02 ..) ocolor(white ..) \n\tclmethod(custom) clbreaks(0 (2000) 12000)\n```\n:::\n\n::: {.cell layout-ncol=\"2\"}\n::: {.cell-output-display}\n![Region GDP per capita in 1950 and 2010 - same legend breaks](Lab-2-resources/stata_1.png){width=448}\n:::\n\n::: {.cell-output-display}\n![Region GDP per capita in 1950 and 2010 - same legend breaks](Lab-2-resources/stata_2.png){width=448}\n:::\n:::\n\n\nIn our side-by-side figure above we encounter a challenge in comparing maps over time - we have both an evolving metric on aggregate (regional GDP per capita increases in real terms from 1950 to 2010) and within regions (with regions containing large cities seeing faster growth than rural areas, for example). As such, choosing the same breaks on both maps is inappropriate. \n\nWe can show the evolution of the distribution with two density plots drawn on the same axes.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrange atx 0 40000\n\nkdensity regional_gdp_cap_1990 if year == 1950, gen(xp densityp) at(atx) nograph \nkdensity regional_gdp_cap_1990 if year == 2010 , gen(xm densitym) at(atx) nograph \n\nline densityp xp   \n    || line densitym xm,  yaxis(2)    \n    ||,  xtitle(\"\") legend(pos(6) row(1)) ytitle(\"\") ytitle(\"\", axis(2)) \n\tlegend(order(1 \"1950\" 2 \"2010\")) title(\"Distributions of regional GDP per capita\")\n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n![](Lab-2-resources/stata_4.png){width=786}\n:::\n:::\n\n\n### Letting Stata select breaks\n\nInstead of setting bounds based on thresholds that we choose, in the map below, we allow Stata to select the breaks based on the data that we are mapping. \n\nIn this case, Stata breaks the distribution up into **four** brackets, with the lowest containing the observations from the first to 25th percentile, the second from the 26th percentile to the median, and so on. Because clmethod(quantile) is actually the default classification method, we don't need to specify it in our command.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nspmap regional_gdp_cap_1990 using \"nutscoord.dta\" if year == 1950, id(_ID) fcolor(Blues2) legend(pos(9)) legstyle(2) \n\ttitle(\"Regional GDP per Capita - 1950\", size(medium)) \n\tosize(0.02 ..) ocolor(white ..)\n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n![](Lab-2-resources/stata_3.png){width=448}\n:::\n:::\n\n\nWhen we do this for two maps showing the same variable in two time periods, we can use quantile breaks to highlight the change between the periods - which regions have seen growth and which have dallied behind.\n\nIn the code below, we produce two maps with Stata's default four bins based on the distribution of regional GDP per capita and compare them.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nspmap regional_gdp_cap_1990 using \"nutscoord.dta\" if year == 1950, id(_ID) fcolor(YlGnBu) legend(pos(9)) legstyle(2) \n\ttitle(\"Regional GDP per Capita - 1950\", size(medium)) \n\tosize(0.02 ..) ocolor(white ..) \n\tclmethod(quantile) name(graph_1950, replace)\n\t\nspmap regional_gdp_cap_1990 using \"nutscoord.dta\" if year == 2010, id(_ID) fcolor(YlGnBu) legend(pos(9)) legstyle(2) \n\ttitle(\"Regional GDP per Capita - 2010\", size(medium)) \n\tosize(0.02 ..) ocolor(white ..) \n\tclmethod(quantile) name(graph_2010, replace)\n\ngraph combine graph_1950 graph_2010\n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n![](Lab-2-resources/stata_5.png){width=786}\n:::\n:::\n\n\n\n### Specifying quantile breaks\n\nWe can also increase the number of breaks by specifying the method and number of breaks: **clmethod(quantile) clnumber(8)**.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nspmap regional_gdp_cap_1990 using \"nutscoord.dta\" if year == 1950, id(_ID) fcolor(YlOrRd) legend(pos(9)) legstyle(2) \n\ttitle(\"Regional GDP per Capita - 1950\", size(medium)) \n\tosize(0.02 ..) ocolor(white ..) \n\tclmethod(quantile) clnumber(8)\n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n![](Lab-2-resources/stata_6.png){width=448}\n:::\n:::\n\n\nFurther, we can specify the exact breaks - in this case showing the regional GDP per capita relative to the average for the countries in our dataset.\n\n\n::: {.callout-note}\nYou can compare with maps 2.4a and 2.4b in the course book.\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\nspmap relative_gdp_cap_eu using \"nutscoord.dta\" if year == 1900, id(_ID) fcolor(YlOrRd) legend(pos(9)) legstyle(2) \n\tosize(0.02 ..) ocolor(white ..) title(1900) \n\tclmethod(custom) clbreaks(0 0.8 1 1.2 3) \n\tname(graph_1900, replace)\n\nspmap relative_gdp_cap_eu using \"nutscoord.dta\" if year == 2010, id(_ID) fcolor(YlOrRd) legend(pos(9)) legstyle(2) \n\tosize(0.02 ..) ocolor(white ..) title(2010) \n\tclmethod(custom) clbreaks(0 0.8 1 1.2 3) \n\tname(graph_2010, replace)\n\ngraph combine graph_1900 graph_2010\n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n![Relative regional GDP per capita](Lab-2-resources/stata_7.png){width=786}\n:::\n:::\n\n\n\n## Looking at one country\n\nWe can highlight one country by using the `if` as well as the `&` operators:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nspmap employment_share_industry using \"nutscoord.dta\" \n  if year == 1950 & country == \"Sweden\", id(_ID)\n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n![highlighting Sweden](Lab-2-resources/stata_8.png){width=200}\n:::\n:::\n\n\nWe can generate groups using the `|` (pronounced OR) operator:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngen group_1 = 0\nreplace group_1 = 1 if country == \"Sweden\" | country == \"Denmark\"\n\nspmap employment_share_industry using \"nutscoord.dta\" if year == 1950 & group_1 == 1, id(_ID) \n\tfcolor(Blues2) legend(pos(5) size(3.5)) legstyle(2) \n\ttitle(\"Employment Share Industry - 1950\", size(6)) \n\tosize(0.02 ..) ocolor(white ..) \n\tndfcolor(gray) ndocolor(none ..) ndsize(0.02 ..)\n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n![highlighting Sweden and Denmark](Lab-2-resources/stata_10.png){width=244}\n:::\n:::\n\n\n## Experimenting with colours\n\n\n\nWe can choose from a large selection of the **spmap** colour palettes depending on the context.\n\nHere is the list that you get if you navigate to **fcolor** after typing \n\n\n::: {.cell}\n\n```{.r .cell-code}\nhelp spmap\n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n![Stata's fill colour palettes](Lab-2-resources/stata_11.png){width=210}\n:::\n:::\n\n\nHere is an example of the **Heat** colour palette, showing national GDP per capita in 1950.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nspmap national_gdp_cap_1990 using \"nutscoord.dta\" if year == 1950, id(_ID) fcolor(Heat)\n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n![Example of Heat colour palette](Lab-2-resources/stata_12.png){width=448}\n:::\n:::\n\n\nThe **viridis** colour palette is a fantastic sequential palette, here is is used to show the share of employment in industry in 1950.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncolorpalette viridis, n(8) nograph\nlocal colors `r(p)''\nspmap employment_share_industry using \"nutscoord.dta\" if year == 1950, \n  id(_ID) fcolor(\"`colors'\") legstyle(2) \n\ttitle(\"1950\", size(large)) \n\tosize(0.02 ..) ocolor(white ..) \n\tclmethod(custom) clbreaks(0 (0.1) 0.8) \n\tlegend(pos(9) region(fcolor(gs15)) size(2.5)) legtitle(\"1 = 100%\") \n\tndfcolor(gray) ndocolor(white ..) ndsize(0.02 ..) \n\ttitle(\"Employment share in industry in 1950\")\n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n![Example of viridis colour palette](Lab-2-resources/stata_13.png){width=448}\n:::\n:::\n\n\nWe can also reverse the palette so that high is [blue]{style=\"color: #0000FF;\"} and low is [yellow]{style=\"color: #E4CD05;\"}. Finally we can customize the background with the command **graphregion(color(navy))** which makes the graph background [navy]{style=\"color: #000080;\"}.\n\nPersonally I don't think this adds anything to our understanding - I would stay far away from supurfluous colour but you *can* do this in Stata.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncolorpalette viridis, n(8) nograph reverse\nlocal colors `r(p)''\nspmap employment_share_industry using \"nutscoord.dta\" if year == 1950, id(_ID) fcolor(\"`colors'\") legstyle(2) \n\ttitle(\"1950\", size(large) color(white)) \n\tosize(0.02 ..) ocolor(white ..) \n\tclmethod(custom) clbreaks(0 (0.1) 0.8) \n\tlegend(pos(9) region(fcolor(navy)) color(white) size(2.5)) legtitle(\"1 = 100%\") \n\tndfcolor(gray) ndocolor(white ..) ndsize(0.02 ..) graphregion(color(navy))\n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n![Another example of viridis colour palette](Lab-2-resources/stata_14.png){width=448}\n:::\n:::\n\n\n## Globals and locals\n\n### Why use them?\n\nIn Stata, `locals` and `globals` are used to create and store values that can be reused in different parts of the program.\n\n`locals` are temporary variables that are only stored in memory while the program or do-file is running. They can be used to define values that are specific to a certain block of code or section of the program. Once the program or do-file is finished running, the locals are deleted from memory.\n\n`globals`, on the other hand, are stored in memory until you exit Stata, and can be accessed from any part of the program or do-file. They can be used to define values that need to persist throughout the entire analysis or across different datasets.\n\nThese macros are useful to shorten code and to iterate through a loop multiple times.\n\n### How to use them\n\nIn the code below we make use of locals twice:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nforeach var of varlist employment_share_industry employment_share_services {\n\tforeach i of numlist 1950 (10) 1970 {\n\t\tspmap `var' using \"nutscoord.dta\" if year == `i', id(_ID)\n\t}\n}\n```\n:::\n\n\nThis Stata code creates a series of maps using the **spmap** command.\n\nThe `foreach` loop iterates over two variables, `employment_share_industry` and `employment_share_services`. For each of these variables, the loop creates a map for three years between 1950 and 1970. Specifically, it creates maps for the years 1950, 1960, and 1970, using a step size of 10.\n\nThe `spmap` command is used to create the maps. The first argument of `spmap` is the variable to be mapped, which is specified using the `varlist` option and the local macro `var`. The second argument is the data file containing the spatial coordinates of the regions, specified as \"nutscoord.dta\". The third argument specifies the condition for which the map is created, in this case `year` == ``i'`, which ensures that only the observations corresponding to the current year of the loop are included. The `id(_ID)` option tells spmap to use the `_ID` variable in the dataset as the unique identifier for the regions being mapped.\n\n### Example of an output\n\nHere we make a global macro with a variable list of two variables.\n\nThen we loop through the list of variables to make a map for each, and name the map with the variable and the year. Finally we combine them in a single image.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglobal varlist employment_share_industry employment_share_services\n\nforeach var of varlist $varlist {\n\tforeach i of numlist 1950 (10) 1970 {\n\t\tspmap `var' using \"nutscoord.dta\" if year == `i', id(_ID) name(`var'_`i', replace)\n\t}\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngraph combine employment_share_industry_1960 employment_share_industry_1970 employment_share_industry_1980 employment_share_industry_1990\n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n![Example of **graph combine** used in conjunction with global and local macros](Lab-2-resources/stata_15.png){width=786}\n:::\n:::\n\n\n### Macros treat strings and numbers differently\n\nStrings need quotes and displaying them works just like other locals.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlocal a \"Hello\"\nlocal b \"World\"\ndi \"`a' `b'\"\n```\n:::\n\n\n**Hello World**\n\nNumbers don't need quotes and you can operate on them with operators, for example, the plus opertor.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlocal x = 1\nlocal y = 2\ndi `x' + `y'\n```\n:::\n\n\n**3**\n\n## Graph themes\n\nYou can make your graphs more visually appealing by choosing some nice schemes. Have a look online and don't be afraid to download some using the `ssc install` command.\n\nHere we show the **burd** and **swift_red** schemes.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Prep\nreplace employment_share_industry = employment_share_industry * 100\nreplace employment_share_services = employment_share_services * 100\n\ntwoway line employment_share_industry employment_share_services year if country == \"Sweden\", \n\tby(region, note(\"\")) subtitle(, lstyle(none) size(small)) \n\txlabel(1900 (50) 2000) ylabel(0 (40) 80) ytitle(Share in %) \n\tlegend(size(vsmall)) scheme(burd)\n\ntwoway line employment_share_industry employment_share_services year if country == \"Sweden\", \n\tby(region, note(\"\")) subtitle(, lstyle(none) size(small)) \n\txlabel(1900 (50) 2000) ylabel(0 (40) 80) ytitle(Share in %) \n\tlegend(size(vsmall)) scheme(swift_red)\n```\n:::\n\n::: {.cell layout-ncol=\"2\"}\n::: {.cell-output-display}\n![Region GDP per capita in 1950 and 2010 - same legend breaks](Lab-2-resources/stata_16.png){width=720}\n:::\n\n::: {.cell-output-display}\n![Region GDP per capita in 1950 and 2010 - same legend breaks](Lab-2-resources/stata_17.png){width=786}\n:::\n:::\n\n\n## Labelling\n\nWe can label regions with a little bit of effort. I would do this maybe just once in your lab reports so that the reader is familiar with the context of your chosen regions. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nuse nutscoord, clear # by request: to label the regions\nbysort _ID: egen mean_x = mean(_X)\nbysort _ID: egen mean_y = mean(_Y)\nkeep _ID mean_x mean_y\nduplicates drop\nmerge 1:m _ID using regional_dataset\nkeep if _merge == 3\nkeep if country == \"France\"\nkeep _ID mean_x mean_y region\nduplicates drop\nsave labels_regions, replace\nuse regional_dataset, clear\nkeep if country == \"France\"\nspmap regional_gdp_cap_1990 using \"nutscoord.dta\" if year == 1950, \n\tid(_ID) fcolor(Oranges) ndfcolor(gray) \n\tosize(0.02 ..) ocolor(gs8 ..) legend(color(white) pos(7)) legstyle(2) \n\tlabel(data(labels_regions) xcoord(mean_x) ycoord(mean_y) \n\tlabel(region) size(*0.5) length(50) color(grey)) graphregion(color(navy))\n```\n:::\n\n\n::: {.callout-tip}\nTo have multiple lines of labels see [this Statalist link](https://www.statalist.org/forums/forum/general-stata-discussion/general/1395567-how-to-add-state-names-and-labels-using-spmap)\n:::\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](Lab-2-resources/stata_18.png){width=480}\n:::\n:::\n\n\n## Extra material\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbysort country year: egen test_1 = total(regional_gdp_1990) # pay attention to the sorting when calculating totals\nbysort country (year): egen test_2 = total(regional_gdp_1990)\nbr country region year regional_gdp_1990 national_gdp_1990 test_1 test_2\nassert test_1 != test_2 # useful to test whether a condition holds (or not)\nassert test_1 == national_gdp_1990\n\nreplace employment_share_agriculture = employment_share_agriculture * 100\nbysort country region (year): gen change_share_agriculture_1 = employment_share_agriculture[_n] - employment_share_agriculture[_n-1] # cf. also the time operators l., f. and d. as well as xtset and tsset\n```\n:::\n\n\n- [link to world maps](https://datacatalog.worldbank.org/search/dataset/0038272); can be converted into Stata format; use e.g. \"World Country Polygons - Very High Definition\"; already contains some data\n- [Other World Bank data](https://data.worldbank.org/); can e.g. be matched to the maps\n- read these articles ([bloomberg](https://www.bloomberg.com/news/articles/2015-06-25/how-to-avoid-being-fooled-by-bad-maps) and [Manuel Gimond](https://mgimond.github.io/Spatial/good-map-making-tips.html)) on how to make good maps and discuss.\n",
    "supporting": [
      "Lab-2_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}