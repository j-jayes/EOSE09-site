{
  "hash": "801f67b644e6f9be4774c38ced24d710",
  "result": {
    "markdown": "---\ntitle: \"Stata Lab 1 Mapping Growth: Basic maps\"\nauthor: Vinzent Ostermeyer, adapted Jonathan Jayes\ndate: 2023-01-30\nformat:\n  # pdf:\n  #   toc: true\n  #   colorlinks: true\n  html:\n    code-overflow: wrap\nexecute: \n  eval: false\nimage: \"Lab-1-resources/preview.png\"\n---\n\n\n## Purpose\n\nüó∫Ô∏è One goal of this course is to teach students how to identify a good map -- one which is clear, informative and attractive -- and familiarise students with the commands which allow the creation of these maps in Stata.üìà\n\nIn addition, your lab paper (üìÖ due March 3rd) requires that you include at least 6 maps, so it is worth concentrating in the labs and making use of these resources.üìù\n\nüìö This document is intended to allow you to keep up with the Stata Lab 1 that we will work through in class.üìä\n\nYou can read the document on this website, or download the same information in [pdf format hereüìö](Lab-1.pdf).\n\nIt will include the commands the we use and the output, as well as some hints and tips that will be useful during your projects, I hope.ü§û\n\n## Structure\n\nToday we will be covering the following topics:\n\n1.  Installing basic packages: We will go over how to install the necessary packages in order to run our analysis. This will include packages such as \"spmap\" and \"geo2xy\" which will allow us to create maps in Stata.\n\n2.  Data types: We will discuss the different types of data that we will be working with in this lab. Specifically, we will be using time series data from a spreadsheet and map data from a shapefile. It is important to understand the structure and format of these data types in order to properly analyze and visualize them.\n\n3.  Basic mapping: Once we have our data, we will learn how to draw a basic map using the \"maps\" and \"maptools\" packages. We will go over how to import the shapefile data, how to define the map scale, and how to add different layers to the map such as points, lines, and polygons.\n\nBy the end of this lab, you should have a solid understanding of how to install necessary packages, how to work with different types of data, and how to draw a basic map in Stata.\n\nüìäüó∫Ô∏èüíª Let's get started!\n\n## Getting started\n\nGiven that you have encountered Stata previously in your studies, I will not spend undue time explaining the basics. If you want to brush up on Stata's syntax, I reccomend having a look at [these slides](https://github.com/j-jayes/EOSE09/blob/b8444dd95783f4434ab63c4ad28b0f3033d4fd0a/resources/StataTutorial.pdf) from Oscar Torres-Reyna, or [this set of Youtube videos](https://www.youtube.com/watch?v=oXsPgQe-aqs&ab_channel=SebastianWaiEcon) From Sebastian Wai.\n\n### Install additional programs and set-up\n\nFirst we need to install the packages in Stata that we will make use of. Please do this before our lab session in order to save time.\n\nWe use the `ssc install` command, as follows:\n\n    ssc install spmap, replace\n    ssc install geo2xy, replace\n    ssc install shp2dta, replace\n    ssc install schemepack, replace\n    ssc install scheme-burd, replace\n    ssc install colrspace, replace\n    ssc install palettes, replace\n    ssc install egenmore, replace\n    ssc install outreg2, replace\n\n::: callout-note\nTo run do-files click the \"run-button\" or highlight the lines of code and hit ctrl + D (Windows) or shift + cmd + D (Mac)\n:::\n\nRunning the command should produce output in the console that looks like this:\n\n<blockquote>\n\n| **. ssc install geo2xy, replace**\n|   `checking geo2xy consistency and verifying not already installed...`\n|   `installing into c:\\ado\\plus\\... installation complete.`\n|   `...`\n\n</blockquote>\n\n::: callout-tip\n### Always comment your code\n\nIn Stata you can comment your code in one line\n\n`// like so`\n\nOr if you want to write a longer string\n\n`/*You can put your longer string of text inside a set of slashes and stars*/`\n:::\n\n#### Setting a directory\n\nIt is useful to put all of your work inside a specific file directory. This way, Stata knows where to look for your files and where to save output, like regression tables.\n\nThe path to my folder where I have the files for this lab is:\n\n`C:/Users/User/Documents/Recon/EOSE09/stata_files/`\n\nIf you have a Mac, it will look something like this:\n\n`Users/Jonathan/Documents/Stata-lab/`\n\nIf you want to change the settings on your Mac to display the file path in your **Finder** window, follow [this link](https://www.lifewire.com/use-macs-hidden-finder-path-bar-2260868).\n\nTo tell Stata that this is where I want it to look for my files, I'll use the `cd` (current directory) command in my do-file.\n\n    cd \"C:/Users/User/Documents/Recon/EOSE09/stata_files/\" // set your directory\n\nIf successful, in the console I will see the following output:\n\n<blockquote>\n\n| **. `cd \"C:/Users/User/Documents/Recon/EOSE09/stata_files/\" // set your directory`**\n|   `C:\\Users\\User\\Documents\\Recon\\EOSE09\\stata_files`\n\n</blockquote>\n\nYou can call the help window by typing `help` into the console, and set your Stata version for compatability reasons with the `version` command, like so:\n\n    help // Stata's help function; cf. also the web or Statalist\n    version 16.1 // version control\n\n## Data types\n\nIn order to draw a map in Stata, we need to combine the information from our shapefile (which contains the geographic information such as the shape and location of the features on the map) with the information from our spreadsheet (which contains the data we want to display on the map, such as population or income).\n\nThe process of combining these two types of data is called \"joining\" or \"merging\" and it allows us to link the attributes from the spreadsheet to the geographic features in the shapefile. Without joining the data, we would only have the shape of the features on the map, but not the information we want to display.\n\nYou are likely familiar with the first type of data, it is a wide dataset in an excel spreadsheet.\n\nThe second is a `shapefile` - a file that stores the information a software program needs to draw a map.\n\n::: callout-note\n### Shapefiles üó∫Ô∏èüìäüíªüìÇ\n\nA shapefile is a type of data file that is used to store geographic information, such as the location of streets, buildings, and other features on a map. It is a common format used in geographic information systems (GIS) software.\n\nA shapefile consists of four components with different file extensions:\n\n-   .shp (shapefile): This file stores the actual geometric data for the features in the map, such as the shape of a street or a building.\n\n-   .shx (shape index): This file stores the index of the geometric data in the .shp file, which is used to quickly access the data in the correct order.\n\n-   .dbf (database file): This file stores the attribute data for the features in the map, such as the name of a street or the population of a building.\n\n-   .prj (projection file): This file stores information about the coordinate system and projection used for the data in the shapefile. This is important for ensuring that the map is displayed correctly and that measurements are accurate.\n\nTogether, these four files make up a complete shapefile and are necessary to properly display and analyze the geographic information.\n:::\n\n### Importing the Roses-Wolf dataset from Excel into Stata\n\nAt the moment, the database we want to use to draw our maps is in an excel sheet.\n\nIt has many tabs, and some lines are filled with headings before the data begins, as show here:\n\n![Screenshot of excel file](Lab-1-resources/excel_format.PNG)\n\nWhat we want to do is import the data from each tab, and append it together.\n\n    import excel using RosesWolf_RegionalGDP_v6.xlsx, sheet(\"A1 Regional GDP\") firstrow cellrange(A6:O179) clear // import Excel sheet\n    rename (D E F G H I J K L M N O) (year_1900 year_1910 year_1925 year_1938 year_1950 year_1960 year_1970 year_1980 year_1990 year_2000 year_2010 year_2015)\n\nThis is what the data now looks like inside Stata. It is a wide dataframe, with 173 rows (the number of regions) and 15 variables (3 identifiers and 12 years worth of data)\n\n![Screenshot of Stata format](Lab-1-resources/stata_view_1.PNG)\n\n::: callout-tip\nRecall that the Roses Wolf database has geographic data on GDP and population at the nomenclature of territorial units 2 (NUTS-2) level, from 1900 to 2015.\n:::\n\nNext we want to be sure that Stata is reading in the values as numbers rather than text. For this we use the `destring` command.\n\n    import excel using RosesWolf_RegionalGDP_v6.xlsx, sheet(\"A1 Regional GDP\") firstrow cellrange(A6:O179) clear allstring `// we import each sheet in the Excel file separately and save it as one file`\n    rename (D E F G H I J K L M N O) (year_1900 year_1910 year_1925 year_1938 year_1950 year_1960 year_1970 year_1980 year_1990 year_2000 year_2010 year_2015)\n    destring year_*, replace\n\nIf there are non-numerical values in a string you cannot use destring and should not use the force-option as it would create missing values A better approach is to check all cases that are non-numerical and replace them (e.g. change \"one\" to \"1\")\n\nOther common data cleaning commands could include:\n\n`// tab var1 if missing(real(var1))` `// replace var1 ... if ...` `// destring var1, replace`\n\nNext we want to take the data from a wide format to a long format. A long format means that each row is an observation, each column is a variable, and each cell has just one value in it.\n\n![Reshape graphic](Lab-1-resources/wide_to_long.png)\n\nThe reshape command in Stata is used to change the shape of the data from one format to another. In this specific case, the reshape long option is used to change the data from a \"wide\" format to a \"long\" format.\n\nThe variables that come after \"year_\" are the variables that will be converted from wide to long format. In this case, \"year_\" is not a variable, it is a prefix of the variables that will be reshaped.\n\nThe option i(NUTSCodes Region Countrycurrentborder) specifies the identifier variables, which are variables that uniquely identify the observations in the dataset and will not be reshaped. In this case, \"NUTSCodes\", \"Region\", and \"Countrycurrentborder\" are the identifier variables.\n\nThe option j(year) specifies the variable that will be used as the new variable name for the reshaped variables. In this case, the new variable name will be \"year\" and it will be the identifier of the year of the data.\n\nWe save the data as a `.dta` file with the `save` command. The replace option overwrites any file with the same name in the directory.\n\n    help reshape // Read up about the command here\n    reshape long year_, i(NUTSCodes Region Countrycurrentborder) j(year)\n    rename year_ regional_gdp_millions\n    save regional_gdp, replace \n\n::: callout-tip\nNever overwrite your raw data - this could be a big problem if you haven't saved it somewhere else. Good practice is to save a copy of your data in a different folder before the analysis, and make any changes through your do-file (e.g. changing \"one\" to \"1\" in Stata rather than excel).\n:::\n\nNow we can see the data in a long format if we use the browse (`br`) command:\n\n![](Lab-1-resources/regional_gdp.PNG)\n\nWe repeat this process for the remaining sheets in the Excel workbook.\n\n    import excel using RosesWolf_RegionalGDP_v6.xlsx, sheet(\"A1b Regional GDP (2011PPP)\") firstrow cellrange(A6:O179) clear allstring // repetition of the steps above for each sheet\n    rename (D E F G H I J K L M N O) (year_1900 year_1910 year_1925 year_1938 year_1950 year_1960 year_1970 year_1980 year_1990 year_2000 year_2010 year_2015)\n    destring year_*, replace\n    reshape long year_, i(NUTSCodes Region Countrycurrentborder) j(year)\n    rename year_ regional_gdp_2011_ppp_millions\n    save regional_gdp_2011_ppp, replace\n    ...\n\n### Importing the shapefiles into Stata\n\nDescribe importing a shapefile into Stata \n\n    clear // clear the dataset in memory\n    \n    shp2dta using regions_nuts2, database(regions) coordinates(nutscoord) genid(_ID) replace\n    \nNow we have a little data cleaning to do:\nThere are three particular regions that need to be joined together in the Roses-Wolf database in order to be plotted correclty. \n\nTODO insert image of joining together\n\n    use regions, clear // fixing the identifier of the NUTS_Codes so that the merge below works for all regions in the dataset\n    replace NUTS_CODE = \"AT12+AT13\" if NUTS_CODE == \"AT123\"\n    replace NUTS_CODE = \"DE71+DE72\" if NUTS_CODE == \"DE712\"\n    replace NUTS_CODE = \"DE91+DE92\" if NUTS_CODE == \"DE912\"\n    save regions, replace\n    \n#### Projections\n\n::: callout-note\nTODO explain projections and include xkcd comic.\n\nHave a look at [this link](https://www.statalist.org/forums/forum/general-stata-discussion/general/1306288-legend-in-spmap) to the Stata forum that explains different projections.\n:::\n\nWe will use the Albers projection, which is saved as `nutscoord.dta` in your working directory.\n\n    use nutscoord, clear // we use the Albers projection; every projection looks a bit different\n\nLet's give a gander what the projection looks using the `scatter` command.\n\n    scatter _Y _X\n    scatter _Y _X, msize(tiny) msymbol(point)\n\n\n::: {.cell layout-ncol=\"2\"}\n::: {.cell-output-display}\n![Comparison of scatter plots](Lab-1-resources/scatter_no_opts.png){width=696}\n:::\n\n::: {.cell-output-display}\n![Comparison of scatter plots](Lab-1-resources/scatter_with_opts.png){width=696}\n:::\n:::\n\n\n\n::: callout-tip\nTODO Explain the graph options msize and msymbol in Stata's scatter command.\n:::\n\nhelp geo2xy // you can try the other projections as well\ngeo2xy _Y _X, proj(albers) replace\nscatter _Y _X, msize(tiny) msymbol(point)\nsave nutscoord, replace\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}