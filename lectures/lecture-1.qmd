---
title: "Data visualization"
title-slide-attributes:
  data-background-image: "lecture-1-resources/preview.png"
  data-background-size: "30%"
  data-background-opacity: "0.6"
format: 
  revealjs:
    code-overflow: wrap
    width: 1600
    height: 900
    fig-align: center
    default-image-extension: svg
    fig-width: 8
    fig-height: 6
    chalkboard: true
image: "lecture-1-resources/preview.png"
editor: 
  markdown: 
    wrap: sentence
date: today
---

```{r}
#| include: false
#| echo: false

knitr::opts_chunk$set(comment = "")
library(tidyverse)
library(lubridate)
library(cowplot)
library(colorspace)
library(here)
library(gt)
library(ggrepel)
library(gghighlight)
library(scales)
library(ggtext)

theme_set(theme_light(16)) # 16 for full width, 18 for half width 
update_geom_defaults("point", list(size = 2)) # 2 for full width, 2.5 for half width
```

## Purpose

::: columns
::: {.column width="40%"}
1.  Get you excited about storytelling with data

2.  Show some tips and tricks to make your maps and charts pop
:::

::: {.column width="10%"}
:::

::: {.column width="50%"}
<iframe width="600" height="400" src="https://www.youtube.com/embed/hVimVzgtD6w" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen>

</iframe>

[Hans Rosling's *the best stats you've ever seen*](https://www.ted.com/talks/hans_rosling_the_best_stats_you_ve_ever_seen)
:::
:::

::: aside
This is not about the software.
Rather, it is about the theory behind communicating well with data
:::

::: notes

If you have not seen Hans Rosling's TED talk, I highly recommend it. It is a great example of how to tell a story with data.

Hans Rosling was a Swedish doctor, who was passionate about using data to tell stories. He was a professor of international health at the Karolinska Institute in Stockholm, and he co-founded the Gapminder Foundation that was great at geting policy makers excited about data based decision making.

:::

## Structure

::: columns
::: {.column width="40%"}
1.  Improving your maps

2.  Overcoming Excel

3.  Telling a story with data

4.  Reproducing figures for publication
:::

::: {.column width="10%"}
:::

::: {.column width="50%"}
```{r}
#| fig-align: center
knitr::include_graphics(here::here("lectures", "lecture-1-resources", "overcoming_excel.png"))
```
:::
:::

::: aside
A cartoon in the style of Aardman Animations depicting an animatronic computer fighting with a spreadsheet, vibrant green lighting
:::

::: notes

Today's lecture will begin with a little addition to the excercises that we worked on yesterday. Then we will talk about Excel as a software, how to tell a story with your data, and we will end with a little demonstration about how to reproduce figures for your own analysis.

:::

## Everything is a story

```{r}
#| fig-align: center
knitr::include_graphics(here::here("lectures", "lecture-1-resources", "abed.PNG"))
```

::: notes

This is a line that Abed says to Jeff in one of my favorite TV shows, Comunity.

Can I get a show of hands, who has seen Community?

In any case, Community's creator Dan Harmon really likes this idea about everything being a story. 

:::

## Dan Harmon's Story Circle

```{r}
#| fig-align: center

knitr::include_graphics(here::here("lectures", "lecture-1-resources", "story-circle.jpg"))
```

::: notes

So Dan Harmon also wrote Rick and Morty. Can I get a show of hands, who has seen Rick and Morty?

Great! So Dan Harmon has this idea of the story circle. It is a way to structure a story, demonstrated here with an eight part pie chart showing an example of a Rick and Morty episode.

Read the parts of the story circle out loud.

:::

## Our Story Circle

```{r}
#| fig-align: center

knitr::include_graphics(here::here("lectures", "lecture-1-resources", "image_our_story_circle.png"))
```

::: notes
Zone of comfort: Data in excel

Want something: to be better at communicating with your data

Enter an unfamiliar situation: Looking closely at maps and charts

Adapt to it: Practice discussing the differences

Get what they wanted: Banging chart skills

Pay a heavy price: Hard to concentrate - relax with an inspiring video

Return to familiar situation: your projects

Having changed: I hope you learn something.

:::

## {background-color="#e99869" background-image="lecture-1-resources/preview.png" background-position="left" background-size="contain"}

::: {style="position: absolute; left: 480px; top: 200px; height: 525px; width: 1500px; background-color: #69b1e9; padding: 20px; padding-left: 50px; box-shadow: 15px 15px 0px 0px #a9bcd2; border-radius: 5px;"}
[Improving your maps]{style="font-size: 120px; font-weight: bold; line-height: 1em; margin: 0px"}

<br>

[Legend breaks]{style="font-size: 60px; font-weight: bold;"}

:::

## Recap from Lab 1 exercises

<blockquote>

Make a map of the share of employment in industry in the year 2010 across the whole dataset

</blockquote>

## Recap from Lab 1 exercises

```{r}
library(countdown)

countdown(minutes = 1, seconds = 0, play_sound = TRUE)
```


<br>

:::: columns
::: {.column width="50%"}

```{r}
knitr::include_graphics(here::here("lectures", "lecture-1-resources", "stata_1.png"))
```

:::
::: {.column width="50%"}

Discuss with your neighbour:

-   What do we like?

-   What is confusing?

```{r}
#| echo: true
#| eval: false
spmap employment_share_industry using "nutscoord.dta" 
  if year == 2010, 
  id(_ID) fcolor(Spectral) legstyle(2) 
	title("Employment Share Industry - 2010", size(large)) 
	osize(0.02 ..) ocolor(white ..) 
	clmethod(custom) clbreaks(0 (0.2) 1)
	legend(pos(9) size(medium) rowgap(1.5) 
	label(6 "80-100 %") label(5 "60-80 %") 
	label(4 "40-60 %") label(3 "20-40 %") label(2 "0-20 %") 
	label(1 "No Data")) 
	ndfcolor(gray) ndocolor(white ..) ndsize(0.02 ..)
```

:::
::::

::: notes

So I am going to ask you to turn to your neighbour, and discuss what you like about this map, and what is confusing about it. 

You should hear a sound when the time is up. I'm really proud of the countdown timer and the sound in the slides and will be very sad if it doesn't work, but if it doesn't, I'll just shout.

Okay - what do we think? Feel free to raise your hands if you want to report back.

:::

## Let's plot the distribution of the data

<br>

:::: columns
::: {.column width="50%"}

```{r}
knitr::include_graphics(here::here("lectures", "lecture-1-resources", "stata_1_2.png"))
```

:::
::: {.column width="50%"}

```{r}
#| echo: true
#| eval: false
histogram employment_share_industry if year == 2010, 
  color(midblue)
```

:::
::::

::: notes

So in Stata we can make a histogram of our data with the hisogram command. This allows us to see the distribution of the data - for each region in the dataset, we look what the value is of regional share of employment in industry, and we count that value and add it to the bin. 

Here we can see that all of the data lies between about 0.08 and .4 - in percentage terms that means that the share of employment in industry is between 8 and 40 percent in 2010 across our dataset.

:::


## Let's plot the distribution of the data

<br>

:::: columns
::: {.column width="50%"}

```{r}
knitr::include_graphics(here::here("lectures", "lecture-1-resources", "stata_2.png"))
```

:::
::: {.column width="50%"}

```{r}
#| echo: true
#| eval: false
kdensity employment_share_industry if year == 2010
```

:::
::::

::: notes

We can also use what is called a kernel density plot to show the distribution of the data. This is a smoothed version of the histogram, where we can see the distribution of the data in a more continuous way.

What can we say about the shape of the distribution?

:::


## Now let's make breaks based on this information

<br>

:::: columns
::: {.column width="50%"}

```{r}
knitr::include_graphics(here::here("lectures", "lecture-1-resources", "stata_3.png"))
```

:::
::: {.column width="50%"}

```{r}
#| echo: true
#| eval: false
#| code-line-numbers: "5,7,8,9"

spmap employment_share_industry using "nutscoord.dta" 
  if year == 2010, id(_ID) fcolor(Spectral) legstyle(2) 
	title("Employment Share Industry - 2010", size(large)) 
	osize(0.02 ..) ocolor(white ..) 
	clmethod(custom) clbreaks(0 (0.075) 0.45) 
	legend(pos(9) size(medium) rowgap(1.5) 
	label(7 "37-45 %") label(6 "30-37 %") 
	label(5 "23-30 %") label(4 "15-23 %") 
	label(3 "8-15 %") label(2 "0-8 %") 
	label(1 "No Data")) 
	ndfcolor(gray) ndocolor(white ..) ndsize(0.02 ..)
	
```

:::
::::

::: notes

Here instead of using the breaks covering all the way from zero to 100 percent, we trim the breaks to cover the range of the data, in this case from zero to 45 percent, which we break up into six bins. 

Now it is much more clear that in Paris, Copenagen, Oslo and Stockholm, there are relatively few people working in industry, (and we know that the majority work in services).

In contrast, in Northern Italy, as we spoke about yesterday, there is a strong industrial base. In the Basque country, there is a strong industrial base around Bilbao. 

:::

## Colour scales

Uses of color in data visualization

. . .

<table style = "border: none; line-height: 2.5;">
<tr style = "background: white;">
<td style = "text-align: left; width: 50%;">
1. Distinguish categories (qualitative)
</td>
<td>
<img src = "lecture-1-resources/qualitative.png" width = 100% style = "text-align: right; vertical-align: middle"></img>
</td>
</tr>
</table>

::: notes

Now we are going to talk about the different types of colour scales that we can use in data visualization.

We looked yesterday at some sequential palettes, like the Blues2 palette that comes standard in Stata.

There are also other type, including qualitative palettes, which are used to distinguish between different categories.

:::

## Qualitative scale example

```{r}
#| fig-align: center

df <- read_rds(here::here("lectures", "lecture-1-resources", "solar_panels_se.rds"))

region_colors <- c("#E69F00", "#56B4E9", "#009E73")


df %>%
  filter(
    nchar(region_code) > 2,
    power_class == "Total",
    year == 2021
  ) %>%
  mutate(county = case_when(
    str_detect(region_code, "^01") ~ "Stockholm",
    str_detect(region_code, "^12") ~ "Skåne",
    str_detect(region_code, "^14") ~ "Västra Götalands",
    TRUE ~ "Other"
  )) %>%
  filter(county != "Other") %>%
  ggplot(aes(solar_cell_installations, installed_capacity_mw, colour = county)) +
  geom_point() +
  geom_text_repel(aes(label = region), show.legend = F) +
  scale_x_log10() +
  scale_y_log10() +
  scale_color_manual(values = region_colors) +
  labs(
    x = "Number of solar panels installed",
    y = "Installed solar capacity (megawatts)",
    colour = "County"
  )

```

Palette name: Okabe-Ito

::: notes

In this graph I have chosen to plot some data about the number of solar panels installed in various Swedish towns, and the installed capacity of those solar panels.

The data isn't important in this case, but we can see that there is a strong linear relationship between the number of solar panels installed and the installed capacity of those solar panels.

In this case, we might want to distinguish between different counties in Sweden, and so we use a qualitative palette to do so.

We can see that there are both the largest number of panels and the largest installed capacity in Gothenburg, followed by Stockholm and Malmö - which makes sense.

In this instance, we can choose colours that distingish between the different counties, and we can see that the Okabe-Ito palette is a good choice for this. We aren't saying that this town is 'more Skane' than others, so a sequential palette is not appropriate.

:::

## Qualitative scale example

```{r}
#| fig-align: center

df %>%
  filter(
    nchar(region_code) > 2,
    power_class == "Total",
    year == 2021
  ) %>%
  mutate(county = case_when(
    str_detect(region_code, "^01") ~ "Stockholm",
    str_detect(region_code, "^12") ~ "Skåne",
    str_detect(region_code, "^14") ~ "Västra Götalands",
    TRUE ~ "Other"
  )) %>%
  filter(county != "Other") %>%
  ggplot(aes(solar_cell_installations, installed_capacity_mw, colour = county)) +
  geom_point() +
  geom_text_repel(aes(label = region), show.legend = F) +
  scale_x_log10() +
  scale_y_log10() +
  scale_color_brewer(palette = "Set1") +
  labs(
    x = "Number of solar panels installed",
    y = "Installed solar capacity (megawatts)",
    colour = "County"
  )
```

Palette name: Brewer Set1

## Qualitative scale example

```{r}
#| fig-align: center

df %>%
  filter(
    nchar(region_code) > 2,
    power_class == "Total",
    year == 2021
  ) %>%
  mutate(county = case_when(
    str_detect(region_code, "^01") ~ "Stockholm",
    str_detect(region_code, "^12") ~ "Skåne",
    str_detect(region_code, "^14") ~ "Västra Götalands",
    TRUE ~ "Other"
  )) %>%
  filter(county != "Other") %>%
  ggplot(aes(solar_cell_installations, installed_capacity_mw, colour = county)) +
  geom_point() +
  geom_text_repel(aes(label = region), show.legend = F) +
  scale_x_log10() +
  scale_y_log10() +
  scale_color_brewer(palette = "Dark2") +
  labs(
    x = "Number of solar panels installed",
    y = "Installed solar capacity (megawatts)",
    colour = "County"
  )
```

Palette name: Brewer Dark2

## Uses of color in data visualization

<table style = "border: none; line-height: 2.5;">
<tr style = "background: white;">
<td style = "text-align: left; width: 50%;">
1. Distinguish categories (qualitative)
</td>
<td>
<img src = "lecture-1-resources/qualitative.png" width = 100% style = "text-align: right; vertical-align: middle"></img>
</td>
</tr>

<tr style = "background: white;">
<td style = "text-align: left;">
2. Represent numeric values (sequential)
</td>
<td>
<img src = "lecture-1-resources/sequential.png" width = 100% style = "text-align: right; vertical-align: middle"></img>
</td>
</tr>
</table>

::: notes

The next palette is a sequential palette, which is used to represent numeric values, or numbers that are ordered in some way.

:::

## Sequential scale example

```{r}
#| fig-align: center
#| fig-width: 10
#| fig-height: 8

sun_hours <- read_rds(here::here("lectures", "lecture-1-resources", "sun_hours.rds"))

sun_hours %>%
  mutate(
    month = month(date, label = T)
  ) %>%
  group_by(city, month) %>%
  summarise(mean_sun_hours = mean(sun_hours)) %>%
  ggplot(aes(x = month, y = city, fill = mean_sun_hours)) +
  geom_tile(width = .95, height = 0.95) +
  scale_fill_viridis_c(
    option = "B", begin = 0.15, end = 0.98,
    name = "Hours of sunlight"
  ) +
  scale_x_discrete(name = "Month") +
  scale_y_discrete(name = NULL) +
  coord_fixed(expand = FALSE) +
  theme_half_open(16) +
  theme(
    axis.line = element_blank(),
    axis.ticks = element_blank(),
    legend.title = element_text(size = 14)
  )
```

Palette name: inferno

::: notes

Here we are looking at the number of hours of sunlight in different cities around the world. 

We can see that in Lund, because we are quite far North, we have very few hours of sunlight in the winter, and a lot of hours of sunlight in the summer.

In contrast, Panama City has a very consistent number of hours of sunlight throughout the year as it lies near the equator.

We can also see that in Cape Town and Livingstone Zambia we have the reverse pattern to Lund - with more hours of sunlight in the winter than in the summer.

The inferno sequential palette is a good choice for this data, as it shows the progression of the number of hours of sunlight in a clear way.

For a sequential palette, you want the person looking at your plot to be able to see clearly the progression of the data, as well as which is high and which is low. I think in this case it makes sense to use the brighter end of the scale as high, because we associate it with sunlight - quite neat!!.

## Sequential scale example

```{r}
#| fig-align: center
#| fig-width: 10
#| fig-height: 8

sun_hours %>%
  mutate(
    month = month(date, label = T)
  ) %>%
  group_by(city, month) %>%
  summarise(mean_sun_hours = mean(sun_hours)) %>%
  ggplot(aes(x = month, y = city, fill = mean_sun_hours)) +
  geom_tile(width = .95, height = 0.95) +
  scale_fill_viridis_c(
    option = "D", begin = 0.15, end = 0.98,
    name = "Hours of sunlight"
  ) +
  scale_x_discrete(name = "Month") +
  scale_y_discrete(name = NULL) +
  coord_fixed(expand = FALSE) +
  theme_half_open(16) +
  theme(
    axis.line = element_blank(),
    axis.ticks = element_blank(),
    legend.title = element_text(size = 14)
  )
```

Palette name: viridis

## Uses of color in data visualization

<table style = "border: none; line-height: 2.5;">
<tr style = "background: white;">
<td style = "text-align: left; width: 50%;">
1. Distinguish categories (qualitative)
</td>
<td>
<img src = "lecture-1-resources/qualitative.png" width = 100% style = "text-align: right; vertical-align: middle"></img>
</td>
</tr>

<tr style = "background: white;">
<td style = "text-align: left;">
2. Represent numeric values (sequential)
</td>
<td>
<img src = "lecture-1-resources/sequential.png" width = 100% style = "text-align: right; vertical-align: middle"></img>
</td>
</tr>

<tr style = "background: white;">
<td style = "text-align: left;">
3. Represent numeric values (diverging)
</td>
<td>
<img src = "lecture-1-resources/diverging.png" width = 100% style = "text-align: right; vertical-align: middle"></img>
</td>
</tr>
</table>

::: notes

Next we can talk about a diverging palette, which is used to represent numeric values that are ordered in some way, and we want to know how far each point is away from the midpoint or median value. 

:::

## Diverging scale example

```{r}
#| fig-align: center
df <- read_rds(here::here("lectures", "lecture-1-resources", "solar_panels_se.rds"))


df %>%
  filter(
    nchar(region_code) > 2,
    power_class == "Total",
    year == 2021
  ) %>%
  mutate(county = case_when(
    str_detect(region_code, "^01") ~ "Stockholm",
    str_detect(region_code, "^12") ~ "Skåne",
    str_detect(region_code, "^14") ~ "Västra Götalands",
    TRUE ~ "Other"
  )) %>%
  filter(county == "Stockholm") %>%
  mutate(
    median_power = median(installed_capacity_mw),
    share = installed_capacity_mw / median_power,
    region = fct_reorder(region, share)
  ) %>%
  arrange(share) %>%
  mutate(rn = row_number()) %>%
  ggplot(aes(rn, share, colour = share)) +
  geom_point() +
  geom_hline(yintercept = 1.34, lty = 2) +
  scale_y_log10() +
  geom_text_repel(aes(label = region), show.legend = F) +
  scale_color_gradient2(
    low = "darkblue",
    mid = "gray90",
    high = "darkred",
    midpoint = .7,
    trans = "log",
    labels = scales::number_format()
  ) +
  labs(
    x = "Rank of town within Stockholm county",
    y = "Relative installed solar capacity (where median is 1)",
    title = "Installed solar capacity relative to median",
    subtitle = "In Stockholm county",
    colour = "Installed solar capacity relative to median"
  ) +
  theme(legend.position = "bottom") +
  guides(colour = guide_colorbar(
    title.position = "top", barwidth = 25, title.hjust = .5
  ))
```

::: notes

In this instance, we are looking at the solar panel data that we had before, this time, just in Stockholm county. We want to know how far each point is away from the median value of installed solar capacity in Stockholm county - and we can see that the red values are high, and the blue values are low, while the median is a white colour. 

In this case we have a log scale on the y-axis because the data is quite skewed, and we want to be able to see the differences between the points more clearly. So Stockholm city has almost 10X the median installed solar capacity in the county.

:::


## Uses of color in data visualization

<table style = "border: none; line-height: 2.5;">
<tr style = "background: white;">
<td style = "text-align: left; width: 50%;">
1. Distinguish categories (qualitative)
</td>
<td>
<img src = "lecture-1-resources/qualitative.png" width = 100% style = "text-align: right; vertical-align: middle;"></img>
</td>
</tr>

<tr style = "background: white;">
<td style = "text-align: left;">
2. Represent numeric values (sequential)
</td>
<td>
<img src = "lecture-1-resources/sequential.png" width = 100% style = "text-align: right; vertical-align: middle"></img>
</td>
</tr>

<tr style = "background: white;">
<td style = "text-align: left;">
3. Represent numeric values (diverging)
</td>
<td>
<img src = "lecture-1-resources/diverging.png" width = 100% style = "text-align: right; vertical-align: middle"></img>
</td>
</tr>

<tr style = "background: white;">
<td style = "text-align: left;">
4. Highlight
</td>
<td>
<img src = "lecture-1-resources/highlight.png" width = 100% style = "text-align: right; vertical-align: middle"></img>
</td>
</tr>
</table>

::: notes

The last type of palette that we are going to talk about is a highlight palette, which is used to highlight a particular point or set of points in a plot where you have a lot of information.

:::

## Highlight example

```{r}
#| fig-align: center

df <- read_rds(here::here("lectures", "lecture-1-resources", "births_outside_marriage.rds"))

df %>%
  ggplot() +
  geom_line(aes(x = year, y = pbom, colour = country), linewidth = 1.5) +
  gghighlight(flag == 1) +
  scale_y_continuous(labels = percent_format(scale = 1)) +
  theme(
    legend.text = element_text(size = 4),
    legend.position = "bottom",
    plot.title = element_markdown(size = 14)
  ) +
  scale_colour_manual(values = c("#C60C30", "#0D5EAF")) +
  labs(
    title = "Proportion of births outside of marriage in <span style='color:#C60C30'>Denmark</span> and <span style='color:#0D5EAF'>Greece</span>",
    y = NULL,
    x = NULL,
    colour = "Country"
  )
```


::: notes

In this example, we have information on the share of children born outside of marriage in Europe.

We have a lot of lines, and we are interested in highlighting two countries in order to compare them over time.

We can see that in Denmark, the share of children born outside of marriage was higher than Greece in 1960, and then really increased in 1970 to about 1990, before levelling off somewhat at about 50% of children born outside of marriage.

In contrast, in Greece, the share of children born outside of marriage was very low in 1960, and because of the importance of the Orthodox church in Greece, it has remained low throughout the period, only increasing to about 12,5% in 2021.

I did another neat thing here, where I used the markdown in the title to colour the country names in the legend to match the colours of the lines. This way we don't need to have a legend and a title, and we can save some space on the plot. I also used the colours from the flags of the countries, which is a nice touch, if I do say so myself.

:::


## Using density plots to set your legend breaks: quick example

Dataset: Solar panels in Sweden

```{r}
df <- read_rds(here::here("lectures", "lecture-1-resources", "solar_panels_se.rds"))

df_lan <- df %>%
  filter(
    power_class == "Total",
    nchar(region_code) == 2,
    year == 2021,
    region != "Riket"
  ) %>%
  rename(lan_name = region)

df_lan %>%
  select(lan_name, installed_capacity_mw) %>%
  slice_max(installed_capacity_mw, n = 10) %>%
  gt() %>%
  cols_label(
    lan_name = "Swedish county",
    installed_capacity_mw = "Installed solar capacity (megawatts)"
  ) %>%
  tab_header(
    title = md("**Installed solar capacity in Sweden**"),
    subtitle = "Year: 2021"
  ) %>%
  tab_source_note(md("Source: [Energimyndigheten](https://www.energimyndigheten.se/)")) %>%
  tab_options(
    heading.title.font.size = 32,
    table.font.size = 26,
    source_notes.font.size = 20
  ) %>%
  as_raw_html(inline_css = TRUE)
```

::: notes

Let's recap quickly, we have a dataset of solar panels in Sweden, and we are interested in the installed capacity of solar panels in different counties in Sweden.

We want to make a choropleth, or a map that is coloured based on the installed capacity of solar panels in each county.

:::

## How to decide on values for the bins?

Use a histogram or a density plot to see where the weight of the distribution is.

```{r}
#| fig-align: center

df_lan %>%
  ggplot(aes(installed_capacity_mw)) +
  geom_histogram(bins = 8, fill = "midnightblue", alpha = .8) +
  scale_y_continuous(labels = scales::number_format(accuracy = 1)) +
  labs(
    y = "Number of counties",
    x = "Installed solar capacity (megawatts)"
  )
```

```{r}
#| warning: false
#| message: false
#| echo: false
#| fig-align: center

library(sf)

map <- st_read(here::here("lectures", "lecture-1-resources", "maps", "sverige-lan-counties-of-sweden.shp"), quiet = TRUE) %>%
  st_transform(crs = 4326) %>%
  as_tibble() %>%
  rename(lan_name = lan_namn)
```

::: notes

How do we decide on the values for the bins in our choropleth?

Let's make a histogram of the installed capacity of solar panels in the different counties in Sweden.

We can see the range goes from zero to about 300. 

## Map with appropriate breaks

Ask your neighbour: 

1. what kind of palette is this? 

2. Is it appropriate to use with this data?

```{r}
#| fig-align: center
countdown(minutes = 1, seconds = 0, play_sound = TRUE)


df_map <- df_lan %>%
  inner_join(map)

df_map %>%
  ggplot() +
  geom_sf(aes(fill = installed_capacity_mw, geometry = geometry)) +
  coord_sf() +
  theme_map() +
  # scale_fill_gradient2(
  #   high = muted("red"),
  #   mid = "pink",
  #   low = muted("blue"),
  #   midpoint = 100,
  #   guide = "colourbar", aesthetics = "fill"
  # ) +
  scale_fill_binned(type = "viridis", labels = scales::number_format()) +
  # theme_void() +
  labs(
    title = "Installed solar capacity in Sweden",
    fill = "Installed capacity in megawatts"
  )
```

::: notes

So have a look at this map that we have created - and tell me what kind of palette is this, and is it appropriate to use with this data?

Let's take 1 minute to discuss with your neighbour.

:::


## {background-color="#e99869" background-image="lecture-1-resources/preview.png" background-position="left" background-size="contain"}

::: {style="position: absolute; left: 480px; top: 200px; height: 525px; width: 1500px; background-color: #69b1e9; padding: 20px; padding-left: 50px; box-shadow: 15px 15px 0px 0px #a9bcd2; border-radius: 5px;"}
[Improving your maps]{style="font-size: 120px; font-weight: bold; line-height: 1em; margin: 0px"}

<br>

[Great Choropleths]{style="font-size: 60px; font-weight: bold;"}

:::

## Examples of great maps

[Financial Times analysis of Italian election results in 2018](https://www.ft.com/content/35188c6a-4870-11e8-8ee8-cae73aab7ccb)

```{r}
#| fig-align: center

knitr::include_graphics(here::here("lectures", "lecture-1-resources", "ft_italy_elections_1.PNG"))
```

::: notes
This is a map from the FT showing the results of the Italian elections in 2018. You can all get access to the FT through Lund and I think it's a really great resource for data journalism and data visualization.

Maps work best when they show an emerging spatial pattern, as was the case with this map from the recent Italian elections.

Showing the winner at municipality level clearly shows the political divisions in the country. In the north, the Northern League party triumphed largely on the back of an anti-immigration and anti-EU agenda. In the south, the anti-establishment Five Star Movement was even more successful, gaining a majority of votes in many areas.


What is also clever as that they have used a column chart in the map in order to help us understand the aggregate vote share for the main parties.

What kind of palette do you think they have used here? Sequential, qualitative or diverging?

A: qualitative, because they are showing the winner in each municipality.

:::

## Examples of great maps

[Financial Times analysis of Italian election results in 2018](https://www.ft.com/content/35188c6a-4870-11e8-8ee8-cae73aab7ccb)

```{r}
#| fig-align: center

knitr::include_graphics(here::here("lectures", "lecture-1-resources", "ft_italy_elections_2.PNG"))
```

::: notes

Another interesting take on the results was to show the per cent share of vote. This helped to emphasise just how strong the support was for the two parties.

What kind of palette do you think they have used here? Sequential, qualitative or diverging?

A: Sequential, because they are showing the share of the vote in each municipality for two main parties they want to compare.

Another thing I should mention is that they have been quite clever with the legend - you can see here the breaks are in specific places, in oder to best show that the Norhtern League's support is really concentrated in the North, and the Five Star Movement's support is really concentrated in the South and Sicily.

:::

## Examples of great maps

[Human Terrain from The Pudding](https://pudding.cool/2018/10/city_3d/)

```{r}
#| fig-align: center

knitr::include_graphics(here::here("lectures", "lecture-1-resources", "population_southern_sweden.PNG"))
```


::: notes

The other place I really recommend you have a look for inspiration for good data journalism is a website called "The Pudding". They have some really great data visualizations and data journalism pieces, inclduing this one that shows where people live in countries.

Here i have a screenshow of the map showing the Oresund region, and we can see how centered the population is in Copenagenhagen and Malmo, and how the population density drops off as we move away from the cities to smaller towns.

I will say that this is based on buildings and not people, so it is not a perfect representation of the population, but it is a really interesting way to show where people live in a country. Here you can see the Oresund bridge looks like it has people living on it, but that is not the case in reality. 

Let's have a look at some other places - who has visited Japan before? Compare population growth...

:::

## Examples of great maps

[The Coming Crisis: Exploring the U.S. Physician Shortage](https://dfsnow.github.io/ama_viz/exploratory_plots.html) by Daniel Snow

```{r}
#| fig-align: center

knitr::include_graphics(here::here("lectures", "lecture-1-resources", "map-with-scale.PNG"))
```

## {background-color="#e99869" background-image="lecture-1-resources/preview.png" background-position="left" background-size="contain"}

::: {style="position: absolute; left: 480px; top: 200px; height: 525px; width: 1500px; background-color: #69b1e9; padding: 20px; padding-left: 50px; box-shadow: 15px 15px 0px 0px #a9bcd2; border-radius: 5px;"}
[Overcoming Excel]{style="font-size: 120px; font-weight: bold; line-height: 1em; margin: 0px"}

<br>

[Motivation]{style="font-size: 60px; font-weight: bold;"}

:::

## Overcoming Excel

<br>

```{r}
#| fig-align: center

# The popularity data
pop_df = 
  data.frame(
  lang = c("SQL", "Python", "R", "SAS", "Matlab", "SPSS", "Stata"),
  n_jobs = c(107130, 66976, 48772, 25644, 11464, 3717, 1624),
  free = c(T, T, T, F, F, F, F)
  )

## Plot it
pop_df %>% 
  mutate(lang = lang %>% factor(ordered = T)) %>%
  ggplot(aes(x = lang, y = n_jobs, fill = free)) +
  geom_col() +
  geom_hline(yintercept = 0) +
  aes(x = reorder(lang, -n_jobs), fill = reorder(free, -free)) +
  xlab("Statistical language") +
  scale_y_continuous(label = scales::comma) +
  ylab("Number of jobs") +
  labs(
    title = "Comparing statistical languages",
    subtitle = "Number of job postings on Indeed.com, 2022/01/06"
    ) +
  scale_fill_manual(
    "Free?",
    labels = c("True", "False"),
    values = c("#f92672", "darkslategray")
    ) +
  ggthemes::theme_pander(base_size = 17) +
  # theme_ipsum() +
  theme(legend.position = "bottom")
```

::: notes
Excel itself is not a bad tool.

It is very popular!
See the info on jobs that require it.
:::

## Overcoming Excel

<br>

```{r}
#| fig-align: center

tribble(
  ~state, ~pct_req_excel,
  "North Carolina", 43.48,
  "Virginia", 51.43,
  "Georgia", 44.53,
  "South Carolina", 46.15,
  "California", 51.44,
  "New York", 51.03,
) %>%
  mutate(state = fct_reorder(state, pct_req_excel)) %>%
  ggplot(aes(pct_req_excel, state)) +
  geom_col(fill = "#f92672") +
  scale_x_continuous(labels = scales::percent_format(scale = 1)) +
  labs(
    title = "The prevalence of Excel",
    caption = "Source: Formby et al (2017)",
    subtitle = "Percent of graduate jobs requiring Excel proficiency",
    y = NULL,
    x = NULL
  ) +
  ggthemes::theme_pander(base_size = 17)
```

[*Formby et al* (2017) Microsoft Excel: Is It An Important Job Skill for College Graduates?](https://files.eric.ed.gov/fulltext/EJ1140801.pdf)

## Overcoming Excel

<br>

### Takeaways:

::: columns
::: {.column width="50%"}
1.  You will likely use Excel in the future 📊

2.  Excel's default plots and tables can be improved upon 📈

3.  Simple rules can help you make your message clear 💎
:::

::: {.column width="50%"}



:::
:::

## {background-color="#e99869" background-image="lecture-1-resources/preview.png" background-position="left" background-size="contain"}

::: {style="position: absolute; left: 480px; top: 200px; height: 525px; width: 1500px; background-color: #69b1e9; padding: 20px; padding-left: 50px; box-shadow: 15px 15px 0px 0px #a9bcd2; border-radius: 5px;"}
[Overcoming Excel]{style="font-size: 120px; font-weight: bold; line-height: 1em; margin: 0px"}

<br>

[Charts]{style="font-size: 60px; font-weight: bold;"}

:::


## Overcoming Excel: Column plot

<br>

```{r}
#| include: false
#| echo: false

artists <- tibble(
  artist = c("ABBA", "Avicii", "José González", "Timbuktu", "Robyn"),
  monthly_streamers = c(23483532, 29468049, 4067263, 383274, 3110310)
) %>%
  arrange(desc(monthly_streamers)) %>%
  mutate(
    rank = row_number(),
    monthly_streamers = monthly_streamers / 1000000
  ) %>%
  relocate(rank, .before = artist)

```

::: columns
::: {.column width="30%"}
-   We often encounter datasets containing simple amounts 🤏

-   Here is some data on a sample of Swedish musical artists 🎵

-   I put this data into Excel, and asked for a recommended chart 📊
:::

::: {.column width="10%"}
:::

::: {.column width="60%"}
<!-- ::: {style="all:initial;"} -->

```{r}
artists %>%
  gt() %>%
  tab_header(title = md("**Swedish musical artists**")) %>%
  fmt_number(monthly_streamers, decimals = 2) %>%
  cols_label(
    artist = "Artist",
    monthly_streamers = "Monthly listeners (m)",
    rank = "Rank"
  ) %>%
  cols_align(columns = c(rank), align = c("center")) %>%
  cols_align(columns = c(artist), align = c("left")) %>%
  cols_align(columns = c(monthly_streamers), align = c("right")) %>%
  cols_align_decimal(columns = c(monthly_streamers)) %>%
  tab_source_note(md("Datasource: [Spotify charts Nov 2022](https://charts.spotify.com/home)")) %>%
  tab_options(
    heading.title.font.size = 42,
    table.font.size = 32,
    source_notes.font.size = 28
  ) %>%
  as_raw_html(inline_css = TRUE)
```

<!-- ::: -->

:::
:::

## Your turn

```{r}
countdown(minutes = 2, seconds = 30, play_sound = TRUE)
```

```{r}
#| fig-align: center
knitr::include_graphics(here::here("lectures", "lecture-1-resources", "excel_1.png"))
```

Discuss with your neighbour:

-   What do we like?

-   What is confusing?

## Tip 1: Avoid rotated axis labels

### Ugly 🤢

```{r}
#| fig-align: center

knitr::include_graphics(here::here("lectures", "lecture-1-resources", "excel_1.png"))
```

## Tip 1: Avoid rotated axis labels

### Flip axes so that the text is easier to read 👓

```{r}
#| fig-align: center

knitr::include_graphics(here::here("lectures", "lecture-1-resources", "excel_2.png"))
```

## Tip 2: Pay attention to the order of the bars

### Bad 👎

```{r}
#| fig-align: center

knitr::include_graphics(here::here("lectures", "lecture-1-resources", "excel_1.png"))
```

## Tip 2: Pay attention to the order of the bars

### It is clear that José González recieves more streams than Robyn

```{r}
#| fig-align: center

knitr::include_graphics(here::here("lectures", "lecture-1-resources", "excel_3.png"))
```

## Tip 3: Consider your titles, labels and axes

### Uninformative️ ❗

```{r}
#| fig-align: center

knitr::include_graphics(here::here("lectures", "lecture-1-resources", "excel_1.png"))
```

## Tip 3: Consider your titles, labels and axes

### Note the title, x-axis title, x-axis labels 📙

```{r}
#| fig-align: center

knitr::include_graphics(here::here("lectures", "lecture-1-resources", "excel_4.png"))
```

## Tip 3: Consider your titles, labels and axes

### Titles and captions have different application areas

:::: columns
::: {.column width="45%"}
```{r}
#| fig-align: center
artists %>%
  mutate(artist = fct_reorder(artist, desc(rank))) %>% 
  ggplot(aes(artist, monthly_streamers)) +
  geom_col(fill = "#E69F00") +
  scale_y_continuous(labels = scales::number_format()) +
  labs(x = NULL,
       y = "Monthly listeners (millions)",
       title = "Monthly streams for Swedish musical artists",
       subtitle = "Data from Spotify charts - November 2022") +
    scale_x_discrete(
      name = NULL,
      expand = c(0, 0.4)
    ) +
    coord_flip(clip = "off") +
    theme_minimal_vgrid(12, rel_small = 1) +
    theme(
      axis.line.y = element_blank(),
      axis.ticks.y = element_blank()
    )
```
:::

::: {.column width="10%"}
:::

::: {.column width="45%"}
```{r}
#| fig-align: center
#| fig-cap: "Figure 1: Monthly streams for Swedish musical artists. Data sources: [Spotify charts](https://charts.spotify.com/home) in November 2022"

artists %>%
  mutate(artist = fct_reorder(artist, desc(rank))) %>% 
  ggplot(aes(artist, monthly_streamers)) +
  geom_col(fill = "#E69F00") +
  scale_y_continuous(labels = scales::number_format()) +
  labs(x = NULL,
       y = "Monthly listeners (millions)") +
    scale_x_discrete(
      name = NULL,
      expand = c(0, 0.4)
    ) +
    coord_flip(clip = "off") +
    theme_minimal_vgrid(12, rel_small = 1) +
    theme(
      axis.line.y = element_blank(),
      axis.ticks.y = element_blank()
    )
```
:::
::::

## We can use dots instead of bars

```{r}
#| fig-align: center

artists %>%
  mutate(artist = fct_reorder(artist, desc(rank))) %>% 
  ggplot(aes(artist, monthly_streamers)) +
  geom_col(fill = "#E69F00") +
  scale_y_continuous(labels = scales::number_format()) +
  labs(x = NULL,
       y = "Monthly listeners (millions)") +
    scale_x_discrete(
      name = NULL,
      expand = c(0, 0.4)
    ) +
    coord_flip(clip = "off") +
    theme_minimal_vgrid(12, rel_small = 1) +
    theme(
      axis.line.y = element_blank(),
      axis.ticks.y = element_blank()
    )
```

## We can use dots instead of bars

```{r}
#| fig-align: center

artists %>%
  mutate(artist = fct_reorder(artist, desc(rank))) %>% 
  ggplot(aes(artist, monthly_streamers)) +
  geom_point(colour = "#E69F00", size = 6) +
  scale_y_continuous(labels = scales::number_format()) +
  labs(x = NULL,
       y = "Monthly listeners (millions)") +
    scale_x_discrete(
      name = NULL,
      expand = c(0, 0.4)
    ) +
    coord_flip(clip = "off") +
    theme_minimal_vgrid(12, rel_small = 1) +
    theme(
      axis.line.y = element_blank(),
      axis.ticks.y = element_blank()
    )
```

## Dots are preferable if we want to truncate the axes

Dataset: Solar panels in Sweden

```{r}
#| fig-align: center
#| fig-width: 8
#| fig-height: 6

df <- read_rds(here::here("lectures", "lecture-1-resources", "solar_panels_se.rds"))

df %>%
  filter(
    power_class == "Total",
    nchar(region_code) == 2,
    year == 2021,
    region != "Riket"
  ) %>%
  mutate(
    region = str_remove(region, "län"),
    region = fct_reorder(region, installed_capacity_mw),
    installed_capacity_mw = 200 + installed_capacity_mw
  ) %>%
  ggplot(aes(installed_capacity_mw, region)) +
  geom_point(colour = "#56B4E9", size = 4) +
  labs(
    x = "Installed solar generating capacity (MW)",
    y = "Swedish county"
  )
```

## Dots are preferable if we want to truncate the axes

<br>

```{r}
#| fig-align: center
#| fig-width: 8
#| fig-height: 6

p <- df %>%
  filter(
    power_class == "Total",
    nchar(region_code) == 2,
    year == 2021,
    region != "Riket"
  ) %>%
  mutate(
    region = str_remove(region, "län"),
    region = fct_reorder(region, installed_capacity_mw),
    installed_capacity_mw = 200 + installed_capacity_mw
  ) %>%
  ggplot(aes(installed_capacity_mw, region)) +
  geom_col(fill = "#56B4E9") +
  coord_cartesian(xlim = c(200, NA)) +
  labs(
    x = "Installed solar generating capacity (MW)",
    y = "Swedish county"
  )

stamp_bad(p)
```

[Bar lengths do<br>not accurately<br>represent the<br>data values]{.absolute bottom="10%" right="0%"}

## Dots are preferable if we want to truncate the axes

<br>

```{r}
#| fig-align: center
#| fig-width: 8
#| fig-height: 6

p <- df %>%
  filter(
    power_class == "Total",
    nchar(region_code) == 2,
    year == 2021,
    region != "Riket"
  ) %>%
  mutate(
    region = str_remove(region, "län"),
    region = fct_reorder(region, installed_capacity_mw),
    installed_capacity_mw = 200 + installed_capacity_mw
  ) %>%
  ggplot(aes(installed_capacity_mw, region)) +
  geom_col(fill = "#56B4E9") +
  # coord_cartesian(xlim = c(200, NA)) +
  labs(
    x = "Installed solar generating capacity (MW)",
    y = "Swedish county"
  )

stamp_bad(p)
```

[Key features<br>of the data<br>are obscured]{.absolute bottom="10%" right="0%"}

## Dots are preferable if we want to truncate the axes

<br>

```{r}
#| fig-align: center
#| fig-width: 8
#| fig-height: 6

df %>%
  filter(
    power_class == "Total",
    nchar(region_code) == 2,
    year == 2021,
    region != "Riket"
  ) %>%
  mutate(
    region = str_remove(region, "län"),
    region = fct_reorder(region, installed_capacity_mw),
    installed_capacity_mw = 200 + installed_capacity_mw
  ) %>%
  ggplot(aes(installed_capacity_mw, region)) +
  geom_point(colour = "#56B4E9", size = 4) +
  labs(
    x = "Installed solar generating capacity (MW)",
    y = "Swedish county"
  )
```

## {background-color="#e99869" background-image="lecture-1-resources/preview.png" background-position="left" background-size="contain"}

::: {style="position: absolute; left: 480px; top: 200px; height: 525px; width: 1500px; background-color: #69b1e9; padding: 20px; padding-left: 50px; box-shadow: 15px 15px 0px 0px #a9bcd2; border-radius: 5px;"}
[Overcoming Excel]{style="font-size: 120px; font-weight: bold; line-height: 1em; margin: 0px"}

<br>

[Tables]{style="font-size: 60px; font-weight: bold;"}

:::

## Overcoming Excel: Tables

:::: columns
::: {.column width="30%"}
-   We often encounter datasets containing simple amounts 🤏

-   Here is some data on a sample of Swedish musical artists 🎵

-   I put this data into Excel, and asked it to insert a table 🗃️
:::

::: {.column width="10%"}
:::

::: {.column width="60%"}

```{r}
artists %>%
  gt() %>%
  tab_header(title = md("**Swedish musical artists**")) %>%
  fmt_number(monthly_streamers, decimals = 2) %>%
  cols_label(
    artist = "Artist",
    monthly_streamers = "Monthly listeners (m)",
    rank = "Rank"
  ) %>%
  cols_align(columns = c(rank), align = c("center")) %>%
  cols_align(columns = c(artist), align = c("left")) %>%
  cols_align_decimal(columns = c(monthly_streamers)) %>%
  tab_source_note(md("Datasource: [Spotify charts Nov 2022](https://charts.spotify.com/home)")) %>%
  tab_options(
    heading.title.font.size = 42,
    table.font.size = 32,
    source_notes.font.size = 28
  ) %>%
  as_raw_html(inline_css = TRUE)
```

:::
::::

## Your turn again

```{r}
library(countdown)

countdown(minutes = 2, seconds = 30, play_sound = TRUE)
```

```{r}
#| fig-align: center
knitr::include_graphics(here::here("lectures", "lecture-1-resources", "excel_tab_1.png"))
```

Discuss with your neighbour:

-   What do we like?

-   What is confusing?

## {background-color="FFFFFF"}

:::: columns
::: {.column width="10%"}
:::

::: {.column width="80%"}

```{r}

table_rules <- tribble(
  ~number, ~rule,
  1, "Do not use vertical lines.",
  2, "Do not use heavy horizontal lines between data rows.
    (Horizontal lines as separator between the title row and the first data row or as frame for the entire table are fine.)",
  3, "Text columns should be left aligned.",
  4, "Number columns should be right aligned and should use the same number of decimal digits throughout.",
  5, "Columns containing single characters are centred.",
  6, "The header fields are aligned with their data, i.e., the heading for a text column will be left aligned and the heading for a number column will be right aligned."
) %>%
  mutate(rule = str_squish(rule))

table_rules %>%
  gt() %>%
  cols_label(number = "Number", rule = "Rule") %>%
  tab_header(title = md("**Key rules for table layout**")) %>%
  tab_source_note(md("Source: [Claus Wilke's *Fundamentals of Data Visualization*](https://clauswilke.com/dataviz/figure-titles-captions.html#tables)")) %>%
  cols_align(align = "center", columns = number) %>% 
  tab_options(
    heading.title.font.size = 42,
    table.font.size = 32,
    source_notes.font.size = 28
  ) %>%
  as_raw_html(inline_css = TRUE)

```

:::

::: {.column width="10%"}
:::
::::

## Let's apply these rules

:::: columns
::: {.column width="60%"}

```{r}
countdown(minutes = 1, seconds = 30, play_sound = TRUE)

table_rules %>%
  gt() %>%
  cols_label(number = "Number", rule = "Rule") %>%
  tab_header(title = md("**Key rules for table layout**")) %>%
  tab_source_note(md("Source: [Claus Wilke's *Fundamentals of Data Visualization*](https://clauswilke.com/dataviz/figure-titles-captions.html#tables)")) %>%
  cols_align(align = "center", columns = number) %>%
  tab_options(
    heading.title.font.size = 42,
    table.font.size = 32,
    source_notes.font.size = 28
  ) %>%
  as_raw_html(inline_css = TRUE)

```

:::

::: {.column width="40%"}

```{r}
#| fig-align: center
#| fig-cap: "Table A"

knitr::include_graphics(here::here("lectures", "lecture-1-resources", "excel_tab_2.png"))
```

```{r}
#| fig-align: center
#| fig-cap: "Table B"

knitr::include_graphics(here::here("lectures", "lecture-1-resources", "excel_tab_3.png"))
```

:::
::::

## Let's apply these rules

:::: columns
::: {.column width="60%"}

```{r}
countdown(minutes = 1, seconds = 30, play_sound = TRUE)

table_rules %>%
  gt() %>%
  cols_label(number = "Number", rule = "Rule") %>%
  tab_header(title = md("**Key rules for table layout**")) %>%
  tab_source_note(md("Source: [Claus Wilke's *Fundamentals of Data Visualization*](https://clauswilke.com/dataviz/figure-titles-captions.html#tables)")) %>%
  cols_align(align = "center", columns = number) %>%
  tab_options(
    heading.title.font.size = 42,
    table.font.size = 32,
    source_notes.font.size = 28
  ) %>%
  as_raw_html(inline_css = TRUE)

```

:::

::: {.column width="40%"}
```{r}
#| fig-align: center
#| fig-cap: "Table C"

knitr::include_graphics(here::here("lectures", "lecture-1-resources", "excel_tab_4.png"))
```


```{r}
#| fig-align: center
#| fig-cap: "Table D"

knitr::include_graphics(here::here("lectures", "lecture-1-resources", "excel_tab_5.png"))
```


:::
::::


## {background-color="#e99869" background-image="lecture-1-resources/preview.png" background-position="left" background-size="contain"}

::: {style="position: absolute; left: 480px; top: 200px; height: 525px; width: 1500px; background-color: #69b1e9; padding: 20px; padding-left: 50px; box-shadow: 15px 15px 0px 0px #a9bcd2; border-radius: 5px;"}
[Storytelling with data]{style="font-size: 120px; font-weight: bold; line-height: 1em; margin: 0px"}

<br>

[Related time series]{style="font-size: 60px; font-weight: bold;"}

:::

## Plotting related time series

Dataset: Fertility and births outside of marriage in Denmark and Greece.

Default choice for plotting is two line plots 

```{r}
df <- read.csv(here::here("lectures", "lecture-1-resources", "df_denmark_greece.csv")) %>% as_tibble()

```

```{r}
#| fig-align: center

df %>%
  # gives meaningful variable names
  rename(
    `Total fertility rate` = tfr,
    `Proportion of births outside marriage` = pbom
  ) %>%
  # makes it into a longer dataset so that we can facet
  # wrap by indicator
  pivot_longer(-c(country, year), names_to = "indicator") %>%
  ggplot(aes(year, value, colour = country)) +
  # here we say nrow = 2 so that they are above one another
  facet_wrap(~indicator, nrow = 2, scales = "free_y") +
  geom_line(linewidth = 2.5) +
  # remove unnecessary axis labels
  labs(
    y = NULL,
    x = "Year",
    colour = "Country"
  ) +
  scale_color_brewer(palette = "Dark2") +
  ggthemes::theme_pander(base_size = 17) +
  theme(legend.position = "bottom")
```

## Plotting related time series

<br>

:::: columns
::: {.column width="60%"}

```{r}
df %>%
  # gives meaningful variable names
  rename(
    `Total fertility rate` = tfr,
    `Proportion of births outside marriage` = pbom
  ) %>%
  # makes it into a longer dataset so that we can facet
  # wrap by indicator
  pivot_longer(-c(country, year), names_to = "indicator") %>%
  ggplot(aes(year, value, colour = country)) +
  # here we say nrow = 2 so that they are above one another
  facet_wrap(~indicator, nrow = 2, scales = "free_y") +
  geom_line(linewidth = 2.5) +
  # remove unnecessary axis labels
  labs(
    y = NULL,
    x = "Year",
    colour = "Country"
  ) +
  scale_color_brewer(palette = "Dark2") +
  ggthemes::theme_pander(base_size = 17) +
  theme(legend.position = "bottom")
```

:::

::: {.column width="40%"}

### Pros 👍

- Familiar

### Cons 👎

- Hard to keep track of each series

- Difficult to compare movements across short periods

:::
::::

## An alternative: time on a third axis

<br>

```{r}
#| fig-align: center

df %>%
  mutate(year_flag = ifelse(test = year %% 7 == 0,
    yes = year,
    no = NA
  )) %>%
  ggplot(aes(tfr, pbom, colour = country, label = year_flag)) +
  geom_point() +
  geom_segment(aes(
    x = tfr,
    y = pbom,
    xend = c(tail(tfr, n = -1), NA),
    yend = c(tail(pbom, n = -1), NA)
  ),
  arrow = arrow(length = unit(0.25, "cm"))
  ) +
  geom_text_repel(colour = "black") +
  scale_y_continuous(labels = percent_format(scale = 1)) +
  scale_colour_manual(values = c("#C60C30", "#0D5EAF")) +
  labs(
    x = "Total fertility rate",
    y = "Proportion of births\noutside of marriage",
    title = "Fertility vs births outside of marriage 
       in<br><span style='color:#C60C30'>Denmark</span> and 
       <span style='color:#0D5EAF'>Greece</span>"
  ) +
  ggthemes::theme_pander(base_size = 17) +
  theme(
    legend.position = "none",
    plot.title = element_markdown()
  )

```


## What have we learned?

<br>

:::: columns
::: {.column width="60%"}

```{r}
#| fig-align: center

df %>%
  mutate(year_flag = ifelse(test = year %% 7 == 0,
    yes = year,
    no = NA
  )) %>%
  ggplot(aes(tfr, pbom, colour = country, label = year_flag)) +
  geom_point() +
  geom_segment(aes(
    x = tfr,
    y = pbom,
    xend = c(tail(tfr, n = -1), NA),
    yend = c(tail(pbom, n = -1), NA)
  ),
  arrow = arrow(length = unit(0.25, "cm"))
  ) +
  geom_text_repel(colour = "black") +
  scale_y_continuous(labels = percent_format(scale = 1)) +
  scale_colour_manual(values = c("#C60C30", "#0D5EAF")) +
  labs(
    x = "Total fertility rate",
    y = "Proportion of births\noutside of marriage",
    title = "Fertility vs births outside of marriage 
       in<br><span style='color:#C60C30'>Denmark</span> and 
       <span style='color:#0D5EAF'>Greece</span>"
  ) +
    ggthemes::theme_pander(base_size = 17) +
  theme(
    legend.position = "none",
    plot.title = element_markdown()
  )

```

:::
::: {.column width="40%"}

- Both countries saw a large drop in fertility from the 1960s until the 1980s

- In Denmark, after 1970 we see an increase in the share of children born outside of marriage

- In contrast, Greek families have relatively few children outside of marriage.

- After 1990, Danish fertility increased from 1.3 to 1.8, while Greek fertility remained at 'lowest-low' levels, below replacement.

:::
::::

## What have we changed?

<br>

:::: columns
::: {.column width="60%"}

```{r}
#| fig-align: center

df %>%
  mutate(year_flag = ifelse(test = year %% 7 == 0,
    yes = year,
    no = NA
  )) %>%
  ggplot(aes(tfr, pbom, colour = country, label = year_flag)) +
  geom_point() +
  geom_segment(aes(
    x = tfr,
    y = pbom,
    xend = c(tail(tfr, n = -1), NA),
    yend = c(tail(pbom, n = -1), NA)
  ),
  arrow = arrow(length = unit(0.25, "cm"))
  ) +
  geom_text_repel(colour = "black") +
  scale_y_continuous(labels = percent_format(scale = 1)) +
  scale_colour_manual(values = c("#C60C30", "#0D5EAF")) +
  labs(
    x = "Total fertility rate",
    y = "Proportion of births\noutside of marriage",
    title = "Fertility vs births outside of marriage 
       in<br><span style='color:#C60C30'>Denmark</span> and 
       <span style='color:#0D5EAF'>Greece</span>"
  ) +
    ggthemes::theme_pander(base_size = 17) +

  theme(
    legend.position = "none",
    plot.title = element_markdown()
  )

```

:::
::: {.column width="40%"}

- Indicators on the x- and y-axis and then show time with text labels

- Legend is replaced with colour coded title

- Colours have meaning (main colour of country flag)

- Percentage labels on the y-axis

:::
::::

## {background-color="#e99869" background-image="lecture-1-resources/preview.png" background-position="left" background-size="contain"}

::: {style="position: absolute; left: 480px; top: 200px; height: 525px; width: 1500px; background-color: #69b1e9; padding: 20px; padding-left: 50px; box-shadow: 15px 15px 0px 0px #a9bcd2; border-radius: 5px;"}
[Storytelling with data]{style="font-size: 120px; font-weight: bold; line-height: 1em; margin: 0px"}

<br>

[Giving context]{style="font-size: 60px; font-weight: bold;"}

:::

## Giving context

Sometimes we may want to show a particular series of data in its correct context. 

For instance, in our line graph above which showed the evolution of the share of births outside of marriage in **Denmark and Greece**, we might want to know if these two represent the **extremes** within Europe.

## Giving context

Do **Denmark and Greece** represent the **extremes** of the share of children born outside of marriage in Europe?

<br>

```{r}
#| fig-align: center


df <- read_rds(here::here("lectures", "lecture-1-resources", "births_outside_marriage.rds"))

df %>%
  filter(flag == 1) %>%
  ggplot(aes(x = year, y = pbom, group = country, colour = country)) +
  geom_line(linewidth = 2) +
  scale_color_brewer(palette = "Dark2") +
  scale_y_continuous(labels = percent_format(scale = 1)) +
  labs(
    title = "Proportion of births outside of marriage",
    y = NULL,
    x = NULL,
    colour = "Country"
  ) +
    ggthemes::theme_pander(base_size = 17) +
  theme(legend.position = "bottom")
```

## Giving context with an average

One way to do this would be to show an average for Europe

```{r}
#| fig-align: center

df %>%
  group_by(year) %>% #<<
  mutate(mean_pbom = mean(pbom, na.rm = T)) %>% #<<
  ungroup() %>% #<<
  ggplot() +
  geom_line(aes(x = year, y = pbom, group = country, colour = country),
    data = df %>% filter(flag == 1),
    linewidth = 2
  ) +
  geom_line(aes(x = year, y = mean_pbom, colour = "European average"), linewidth = 2) + #<<
  scale_y_continuous(labels = percent_format(scale = 1)) +
  scale_color_brewer(palette = "Dark2") +
  labs(
    title = "Proportion of births outside of marriage",
    x = NULL,
    y = NULL,
    colour = "Country"
  ) +
  ggthemes::theme_pander(base_size = 17) +
  theme(legend.position = "bottom")
```

## Giving context with an interval ribbon

```{r}
#| fig-align: center

df %>%
  group_by(year) %>%
  mutate(
    mean_pbom = mean(pbom, na.rm = T),
    pct_10 = quantile(pbom, .1, na.rm = T), #<<
    pct_90 = quantile(pbom, .9, na.rm = T)
  ) %>% #<< 
  ungroup() %>%
  ggplot() +
  geom_line(aes(x = year, y = pbom, group = country, colour = country),
    data = df %>% filter(flag == 1), linewidth = 2
  ) +
  geom_ribbon(aes(
    x = year, ymin = pct_10, ymax = pct_90, #<<
    fill = "Interval \n(10th to 90th percentile)"
  ), alpha = .3) + #<<
  geom_line(aes(x = year, y = mean_pbom, colour = "European average"), linewidth = 2) +
  scale_y_continuous(labels = percent_format(scale = 1)) +
  scale_fill_manual(values = "#FFB38A") + #<<
  scale_color_brewer(palette = "Dark2") +
  guides(
    fill = guide_legend(order = 2), #<<
    col = guide_legend(order = 1)
  ) + #<<
  labs(
    y = "Proportion of births\noutside of marriage",
    x = NULL,
    colour = "Country",
    fill = ""
  ) +
  ggthemes::theme_pander(base_size = 17) +
  theme(legend.position = "bottom")
```

## Giving context with all of the data

This is silly

```{r}
#| fig-align: center
#| fig-height: 10
#| fig-width: 10

df %>%   
  ggplot(aes(x = year, y = pbom, group = country, colour = country)) +
  geom_line() +
  scale_y_continuous(labels = percent_format(scale = 1)) +
  labs(title = "Proportion of births outside of marriage",
       y = NULL,
       x = NULL,
       colour = "Country") +
  theme(legend.text = element_text(size = 4),
        axis.title = element_text(size = 8),
        legend.position = "bottom")
```

## Giving context with all of the data

Here we [highlight]{style="color: #C60C30;"} the [series]{style="color: #0D5EAF;"} we are interested in and draw in the remaining series in [grey]{style="color: #7f7f7f;"}

```{r}
#| fig-align: center

df %>%
  ggplot() +
  geom_line(aes(x = year, y = pbom, colour = country), linewidth = 1.5) +
  gghighlight(flag == 1) +
  scale_y_continuous(labels = percent_format(scale = 1)) +
  theme(
    legend.text = element_text(size = 4),
    legend.position = "bottom",
    plot.title = element_markdown(size = 14)
  ) +
  scale_colour_manual(values = c("#C60C30", "#0D5EAF")) +
  labs(
    title = "Proportion of births outside of marriage in <span style='color:#C60C30'>Denmark</span> and <span style='color:#0D5EAF'>Greece</span>",
    y = NULL,
    x = NULL,
    colour = "Country"
  )
```


## What have we changed?

<br>

:::: columns
::: {.column width="60%"}

```{r}
#| fig-align: center
df %>%
  ggplot() +
  geom_line(aes(x = year, y = pbom, colour = country), linewidth = 1.5) +
  gghighlight(flag == 1) +
  scale_y_continuous(labels = percent_format(scale = 1)) +
  theme(
    legend.text = element_text(size = 4),
    legend.position = "bottom",
    plot.title = element_markdown(size = 14)
  ) +
  scale_colour_manual(values = c("#C60C30", "#0D5EAF")) +
  labs(
    title = "Proportion of births outside of marriage in <span style='color:#C60C30'>Denmark</span> and <span style='color:#0D5EAF'>Greece</span>",
    y = NULL,
    x = NULL,
    colour = "Country"
  )

```

:::
::: {.column width="40%"}

- Shows each of the series

- We can see that Denmark is a leader in the beginning, but is caught up by other nations

- Does not hide outliers

- Makes clear the trends in your countries of interest

:::
::::

## {background-color="#e99869" background-image="lecture-1-resources/preview.png" background-position="left" background-size="contain"}

::: {style="position: absolute; left: 480px; top: 200px; height: 525px; width: 1500px; background-color: #69b1e9; padding: 20px; padding-left: 50px; box-shadow: 15px 15px 0px 0px #a9bcd2; border-radius: 5px;"}
[Storytelling with data]{style="font-size: 120px; font-weight: bold; line-height: 1em; margin: 0px"}

<br>

[Tips for polished figures]{style="font-size: 60px; font-weight: bold;"}

:::

## Tips for polishing your figures

Where to get great colours from for your plots:

```{r}
#| fig-align: center
knitr::include_url("https://colorbrewer2.org/#type=sequential&scheme=OrRd&n=3", height = 800)
```

```{r}
#| echo: true
#| eval: false

help spmap # Look for the palettes under fcolor
```

## Recreating published figures

```{r}
#| fig-align: center
#| fig-cap: "A FT chart published without the underlying data"

knitr::include_graphics(here::here("lectures", "lecture-1-resources", "GDP.png"))
```

## Recreating published figures

<br>

```{r}
#| fig-align: center

df <- read.csv(here::here("lectures", "lecture-1-resources", "/Fouquet_Broadberry.csv")) %>% as_tibble()

order <- df %>% group_by(country) %>% filter(x == max(x)) %>% 
  arrange(desc(y)) %>% ungroup() %>% select(country) %>% as.list()

df %>%
  mutate(country = fct_relevel(country, order)) %>%
  mutate(flag = 1) %>%
  ggplot(aes(x, y, colour = country, group = country)) +
  # geom_point() +
  geom_line(linewidth = 1.5, alpha = .8) +
  gghighlight(flag == 1) +
  scale_y_continuous(labels = dollar_format()) +
  scale_color_brewer(palette = "Paired") +
  labs(
    title = "GDP Per Capita in Selected European Countries",
    y = "GDP Per Capita (1990 USD)",
    x = NULL,
    colour = "Country",
    caption = "Source: Fouquet and Broadberry (2011)"
  )
```

## Recreating published figures

<br>

<iframe width="800" height="450" src="https://www.youtube.com/embed/TVCFedRgg5Y" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

## You pay a heavy price

<iframe width="1300" height="700" src="https://www.youtube.com/embed/5Zg-C8AAIGg?controls=0" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

## Additional data demo

<br>

::: {.columns}
::: {.column}

```{r}
knitr::include_url("https://j-jayes.github.io/EOSE09-site/resources/Additional-map-data.html")
```

:::
::: {.column}

```{r}
knitr::include_url("https://j-jayes.github.io/EOSE09-site/resources/dose-demo.html")
```
:::
:::
