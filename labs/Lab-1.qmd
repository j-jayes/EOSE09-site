---
title: "Stata Lab 1 Mapping Growth: Basic maps"
author: Vinzent Ostermeyer, adapted Jonathan Jayes
date: 2023-01-30
format:
  # pdf:
  #   toc: true
  #   colorlinks: true
  html:
    code-overflow: wrap
execute: 
  eval: false
image: "Lab-1-resources/preview.png"
---

## Purpose

üó∫Ô∏è One goal of this course is to teach students how to identify a good map -- one which is clear, informative and attractive -- and familiarise students with the commands which allow the creation of these maps in Stata.üìà

In addition, your lab paper (üìÖ due March 3rd) requires that you include at least 6 maps, so it is worth concentrating in the labs and making use of these resources.üìù

üìö This document is intended to allow you to keep up with the Stata Lab 1 that we will work through in class.üìä

You can read the document on this website, or download the same information in [pdf format hereüìö](Lab-1.pdf).

It will include the commands the we use and the output, as well as some hints and tips that will be useful during your projects, I hope.ü§û

## Structure

Today we will be covering the following topics:

1.  Installing basic packages: We will go over how to install the necessary packages in order to run our analysis. This will include packages such as "spmap" and "geo2xy" which will allow us to create maps in Stata.

2.  Data types: We will discuss the different types of data that we will be working with in this lab. Specifically, we will be using time series data from a spreadsheet and map data from a shapefile. It is important to understand the structure and format of these data types in order to properly analyze and visualize them.

3.  Basic mapping: Once we have our data, we will learn how to draw a basic map using the "maps" and "maptools" packages. We will go over how to import the shapefile data, how to define the map scale, and how to add different layers to the map such as points, lines, and polygons.

By the end of this lab, you should have a solid understanding of how to install necessary packages, how to work with different types of data, and how to draw a basic map in Stata.

üìäüó∫Ô∏èüíª Let's get started!

## Getting started

Given that you have encountered Stata previously in your studies, I will not spend undue time explaining the basics. If you want to brush up on Stata's syntax, I reccomend having a look at [these slides](https://github.com/j-jayes/EOSE09/blob/b8444dd95783f4434ab63c4ad28b0f3033d4fd0a/resources/StataTutorial.pdf) from Oscar Torres-Reyna, or [this set of Youtube videos](https://www.youtube.com/watch?v=oXsPgQe-aqs&ab_channel=SebastianWaiEcon) From Sebastian Wai.

### Install additional programs and set-up

First we need to install the packages in Stata that we will make use of. Please do this before our lab session in order to save time.

We use the `ssc install` command, as follows:

    ssc install spmap, replace
    ssc install geo2xy, replace
    ssc install shp2dta, replace
    ssc install schemepack, replace
    ssc install scheme-burd, replace
    ssc install colrspace, replace
    ssc install palettes, replace
    ssc install egenmore, replace
    ssc install outreg2, replace

::: callout-note
To run do-files click the "run-button" or highlight the lines of code and hit ctrl + D (Windows) or shift + cmd + D (Mac)
:::

Running the command should produce output in the console that looks like this:

<blockquote>

| **. ssc install geo2xy, replace**
|   `checking geo2xy consistency and verifying not already installed...`
|   `installing into c:\ado\plus\... installation complete.`
|   `...`

</blockquote>

::: callout-tip
### Always comment your code

In Stata you can comment your code in one line

`// like so`

Or if you want to write a longer string

`/*You can put your longer string of text inside a set of slashes and stars*/`
:::

#### Setting a directory

It is useful to put all of your work inside a specific file directory. This way, Stata knows where to look for your files and where to save output, like regression tables.

The path to my folder where I have the files for this lab is:

`C:/Users/User/Documents/Recon/EOSE09/stata_files/`

If you have a Mac, it will look something like this:

`Users/Jonathan/Documents/Stata-lab/`

If you want to change the settings on your Mac to display the file path in your **Finder** window, follow [this link](https://www.lifewire.com/use-macs-hidden-finder-path-bar-2260868).

To tell Stata that this is where I want it to look for my files, I'll use the `cd` (current directory) command in my do-file.

    cd "C:/Users/User/Documents/Recon/EOSE09/stata_files/" // set your directory

If successful, in the console I will see the following output:

<blockquote>

| **. `cd "C:/Users/User/Documents/Recon/EOSE09/stata_files/" // set your directory`**
|   `C:\Users\User\Documents\Recon\EOSE09\stata_files`

</blockquote>

You can call the help window by typing `help` into the console, and set your Stata version for compatability reasons with the `version` command, like so:

    help // Stata's help function; cf. also the web or Statalist
    version 16.1 // version control

## Data types

In order to draw a map in Stata, we need to combine the information from our shapefile (which contains the geographic information such as the shape and location of the features on the map) with the information from our spreadsheet (which contains the data we want to display on the map, such as population or income).

The process of combining these two types of data is called "joining" or "merging" and it allows us to link the attributes from the spreadsheet to the geographic features in the shapefile. Without joining the data, we would only have the shape of the features on the map, but not the information we want to display.

You are likely familiar with the first type of data, it is a wide dataset in an excel spreadsheet.

The second is a `shapefile` - a file that stores the information a software program needs to draw a map.

::: callout-note
### Shapefiles üó∫Ô∏èüìäüíªüìÇ

A shapefile is a type of data file that is used to store geographic information, such as the location of streets, buildings, and other features on a map. It is a common format used in geographic information systems (GIS) software.

A shapefile consists of four components with different file extensions:

-   .shp (shapefile): This file stores the actual geometric data for the features in the map, such as the shape of a street or a building.

-   .shx (shape index): This file stores the index of the geometric data in the .shp file, which is used to quickly access the data in the correct order.

-   .dbf (database file): This file stores the attribute data for the features in the map, such as the name of a street or the population of a building.

-   .prj (projection file): This file stores information about the coordinate system and projection used for the data in the shapefile. This is important for ensuring that the map is displayed correctly and that measurements are accurate.

Together, these four files make up a complete shapefile and are necessary to properly display and analyze the geographic information.
:::

### Importing the Roses-Wolf dataset from Excel into Stata

At the moment, the database we want to use to draw our maps is in an excel sheet.

It has many tabs, and some lines are filled with headings before the data begins, as show here:

![Screenshot of excel file](Lab-1-resources/excel_format.PNG)

What we want to do is import the data from each tab, and append it together.

    import excel using RosesWolf_RegionalGDP_v6.xlsx, sheet("A1 Regional GDP") firstrow cellrange(A6:O179) clear // import Excel sheet
    rename (D E F G H I J K L M N O) (year_1900 year_1910 year_1925 year_1938 year_1950 year_1960 year_1970 year_1980 year_1990 year_2000 year_2010 year_2015)

This is what the data now looks like inside Stata. It is a wide dataframe, with 173 rows (the number of regions) and 15 variables (3 identifiers and 12 years worth of data)

![Screenshot of Stata format](Lab-1-resources/stata_view_1.PNG)

::: callout-tip
Recall that the Roses Wolf database has geographic data on GDP and population at the nomenclature of territorial units 2 (NUTS-2) level, from 1900 to 2015.
:::

Next we want to be sure that Stata is reading in the values as numbers rather than text. For this we use the `destring` command.

    import excel using RosesWolf_RegionalGDP_v6.xlsx, sheet("A1 Regional GDP") firstrow cellrange(A6:O179) clear allstring `// we import each sheet in the Excel file separately and save it as one file`
    rename (D E F G H I J K L M N O) (year_1900 year_1910 year_1925 year_1938 year_1950 year_1960 year_1970 year_1980 year_1990 year_2000 year_2010 year_2015)
    destring year_*, replace

If there are non-numerical values in a string you cannot use destring and should not use the force-option as it would create missing values A better approach is to check all cases that are non-numerical and replace them (e.g. change "one" to "1")

Other common data cleaning commands could include:

`// tab var1 if missing(real(var1))` `// replace var1 ... if ...` `// destring var1, replace`

Next we want to take the data from a wide format to a long format. A long format means that each row is an observation, each column is a variable, and each cell has just one value in it.

![Reshape graphic](Lab-1-resources/wide_to_long.png)

The reshape command in Stata is used to change the shape of the data from one format to another. In this specific case, the reshape long option is used to change the data from a "wide" format to a "long" format.

The variables that come after "year_" are the variables that will be converted from wide to long format. In this case, "year_" is not a variable, it is a prefix of the variables that will be reshaped.

The option i(NUTSCodes Region Countrycurrentborder) specifies the identifier variables, which are variables that uniquely identify the observations in the dataset and will not be reshaped. In this case, "NUTSCodes", "Region", and "Countrycurrentborder" are the identifier variables.

The option j(year) specifies the variable that will be used as the new variable name for the reshaped variables. In this case, the new variable name will be "year" and it will be the identifier of the year of the data.

We save the data as a `.dta` file with the `save` command. The replace option overwrites any file with the same name in the directory.

    help reshape // Read up about the command here
    reshape long year_, i(NUTSCodes Region Countrycurrentborder) j(year)
    rename year_ regional_gdp_millions
    save regional_gdp, replace 

::: callout-tip
Never overwrite your raw data - this could be a big problem if you haven't saved it somewhere else. Good practice is to save a copy of your data in a different folder before the analysis, and make any changes through your do-file (e.g. changing "one" to "1" in Stata rather than excel).
:::

Now we can see the data in a long format if we use the browse (`br`) command:

![](Lab-1-resources/regional_gdp.PNG)

We repeat this process for the remaining sheets in the Excel workbook.

    import excel using RosesWolf_RegionalGDP_v6.xlsx, sheet("A1b Regional GDP (2011PPP)") firstrow cellrange(A6:O179) clear allstring // repetition of the steps above for each sheet
    rename (D E F G H I J K L M N O) (year_1900 year_1910 year_1925 year_1938 year_1950 year_1960 year_1970 year_1980 year_1990 year_2000 year_2010 year_2015)
    destring year_*, replace
    reshape long year_, i(NUTSCodes Region Countrycurrentborder) j(year)
    rename year_ regional_gdp_2011_ppp_millions
    save regional_gdp_2011_ppp, replace
    ...

### Importing the shapefiles into Stata

Describe importing a shapefile into Stata 

    clear // clear the dataset in memory
    
    shp2dta using regions_nuts2, database(regions) coordinates(nutscoord) genid(_ID) replace
    
Now we have a little data cleaning to do:
There are three particular regions that need to be joined together in the Roses-Wolf database in order to be plotted correclty. 

TODO insert image of joining together

    use regions, clear // fixing the identifier of the NUTS_Codes so that the merge below works for all regions in the dataset
    replace NUTS_CODE = "AT12+AT13" if NUTS_CODE == "AT123"
    replace NUTS_CODE = "DE71+DE72" if NUTS_CODE == "DE712"
    replace NUTS_CODE = "DE91+DE92" if NUTS_CODE == "DE912"
    save regions, replace
    
#### Projections

::: callout-note
TODO explain projections and include xkcd comic.

Have a look at [this link](https://www.statalist.org/forums/forum/general-stata-discussion/general/1306288-legend-in-spmap) to the Stata forum that explains different projections.
:::

We will use the Albers projection, which is saved as `nutscoord.dta` in your working directory.

    use nutscoord, clear // we use the Albers projection; every projection looks a bit different

Let's give a gander what the projection looks using the `scatter` command.

    scatter _Y _X
    scatter _Y _X, msize(tiny) msymbol(point)

```{r, eval=TRUE}
#| layout-ncol: 2
#| fig-cap: "Comparison of scatter plots"
# TODO fix fig-cap

knitr::include_graphics(here::here("labs/Lab-1-resources/scatter_no_opts.png"))
knitr::include_graphics(here::here("labs/Lab-1-resources/scatter_with_opts.png"))

```


::: callout-tip
TODO Explain the graph options msize and msymbol in Stata's scatter command.
:::

You can experiment with other projections, have a look at the `geo2xy` help file:

    help geo2xy
    
TODO: change to webmercator

    geo2xy _Y _X, proj(albers) replace
    scatter _Y _X, msize(tiny) msymbol(point)
    save nutscoord, replace

### Merge shapefiles and data together

We're nearly there! Now we have both file types in the correct format in Stata. All that is left to do is merge them together so that we can plot maps with the Roses-Wolf data.

We start by importing our clean, long format data.

    use regional_gdp, clear // we merge all created files together

We are going to use the `merge` command. Read more about it by typing `help merge` into the console.

::: callout-tip
TODO Explain the merge command in Stata, including the 1:1 option, and how we won't often make use of m:m matches!
:::

    merge 1:1 NUTSCodes year using regional_gdp_2011_ppp // this is a 1:1 merge
    drop _merge

TODO explain what drop merge does, as well as the nogen command afterwards.

We now repeat the process for all of our variables in the Roses-Wolf database.

    merge 1:1 NUTSCodes year using population, assert(match) nogen
    merge 1:1 NUTSCodes year using share_agriculture, assert(match) nogen
    merge 1:1 NUTSCodes year using share_industry, assert(match) nogen
    merge 1:1 NUTSCodes year using share_services, assert(match) nogen
    
Now we are going to use a m:1 merge. TODO explain

    merge m:1 NUTSCodes using area_km2, assert(match) nogen // this is a m:1 merge; there is also a 1:m merges; m:m merges are a bad idea
    
Let's fix our nomenclature

    rename NUTSCodes NUTS_CODE
    merge m:1 NUTS_CODE using regions

Let'd now drop all of the regions for which there is map information, but no data from the Roses-Wolf database.

    drop if _merge == 2 // we keep all regions that are merged and delete those for which we have geographical information but no data
    drop _merge
    order _ID, after(NUTS_CODE)

Wonderful! Now we have joined together our geographic information from the shapefiles with the data from the Roses-Wolf database.

## Formatting and Creating Variables

This next section is first setting up some calculated variables (e.g. dividing GDP by population for GDP per capita) and secondly adding nice names that are easy to understand what we are up to.

We start by renaming our variables from title case to snake case (where words are in lower case and separated by underscores)

    rename Countrycurrentborder country
    rename (Region regional_gdp_millions regional_gdp_2011_ppp_millions population_thousands area_km2) (region regional_gdp_1990 regional_gdp_2011 regional_population regional_area) // cleaning the dataset

Next we change our GDP and population values from being denominated in millions and thousands to basic levels.

    replace regional_gdp_1990 = regional_gdp_1990 * 1000000
    replace regional_gdp_2011 = regional_gdp_2011 * 1000000
    replace regional_population = regional_population * 1000
    
Next we sum across countries and years to create a summary value for national GDP and national population from the regional values.

    bysort country year: egen national_gdp_1990 = total(regional_gdp_1990)
    bysort country year: egen national_population = total(regional_population)

Creating per capita values at national and regional levels:

    gen national_gdp_cap_1990 = national_gdp_1990 / national_population
    gen regional_gdp_cap_1990 = regional_gdp_1990 / regional_population
    gen regional_gdp_cap_2011 = regional_gdp_2011 / regional_population
    sort country region year

Creating a population density variable:

    gen population_density = regional_population / regional_area // you often have to calculate new variables, which you then can map

Next we are going to make use of a very powerful command, `egen` , in combiation with the `xtile` command to create five groups of regions, based on their where they fall in percentile of regional GDP per capita, for every year which we have data on them.

    egen q_regional_gdp_cap_1990 = xtile(regional_gdp_cap_1990), n(5) by(year) // you can change the number of groups
    sort country region year

Now we are going to create a variable for GDP per capita at the regional level for each region, relative to the average of the entire sample.

    bysort year: egen mean_gdp_cap_eu = mean(regional_gdp_cap_1990)
    sort country region year
    gen relative_gdp_cap_eu = regional_gdp_cap_1990 / mean_gdp_cap_eu

Here we do the same for the country level.

    bysort year country: egen mean_gdp_cap_country = mean(regional_gdp_cap_1990)
    sort country region year
    gen relative_gdp_cap_country = regional_gdp_cap_1990 / mean_gdp_cap_country

Finally, we are going to add some nice labels so that when we draw our graphs they get nice legends by default.

In Stata you can have a variable name (e.g. "country"), and a variable label (a long string e.g. "Country in Current Borders").

    label variable _ID "Region ID"
    label variable year "Year"
    label variable country "Country in Current Borders"
    label variable regional_gdp_1990 "Regional GDP in 1990 International Dollars"
    label variable regional_population "Regional Population"
    label variable employment_share_agriculture "Regional Share of Employment in Agriculture"
    label variable employment_share_industry "Regional Share of Employment in Industry"
    label variable employment_share_services "Regional Share of Employment in Services"
    label variable regional_area "Area in KM2"
    label variable national_gdp_1990 "National GDP in 1990 International Dollars"
    label variable national_gdp_cap_1990 "National GDP per Capita in 1990 International Dollars"
    label variable regional_gdp_cap_1990 "Regional GDP per Capita in 1990 International Dollars"
    label variable national_population "National Population"
    
    format region NUTS_CODE %20s
    
    save regional_dataset, replace
