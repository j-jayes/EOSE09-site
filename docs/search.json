[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "This site holds the Stata labs and one lecture for the course EOSE09 - Economy and Society: Regional Development and Growth, offered at Lund University in Sweden."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "EOSE09 - Economy and Society: Regional Development and Growth",
    "section": "",
    "text": "Stata Lab 1 Mapping Growth: Basic maps\n\n\n\n\n\n\nVinzent Ostermeyer, adapted Jonathan Jayes\n\n\nJan 30, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nStata Lab 2 Mapping Growth: Across Space and Time\n\n\n\n\n\n\nVinzent Ostermeyer, adapted Jonathan Jayes\n\n\nFeb 17, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nResources\n\n\n\n\n\n\nJonathan Jayes\n\n\nMar 30, 2023\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "labs/Lab-1.html",
    "href": "labs/Lab-1.html",
    "title": "Stata Lab 1 Mapping Growth: Basic maps",
    "section": "",
    "text": "üó∫Ô∏è One goal of this course is to teach students how to identify a good map ‚Äì one which is clear, informative and attractive ‚Äì and familiarise students with the commands which allow the creation of these maps in Stata.üìà\nIn addition, your lab paper (üìÖ due March 3rd) requires that you include at least 6 maps, so it is worth concentrating in the labs and making use of these resources.üìù\nüìö This document is intended to allow you to keep up with the Stata Lab 1 that we will work through in class.üìä\nYou can read the document on this website, or download the same information in pdf format hereüìö.\nIt will include the commands the we use and the output, as well as some hints and tips that will be useful during your projects, I hope.ü§û"
  },
  {
    "objectID": "labs/Lab-1.html#structure",
    "href": "labs/Lab-1.html#structure",
    "title": "Stata Lab 1 Mapping Growth: Basic maps",
    "section": "Structure",
    "text": "Structure\nToday we will be covering the following topics:\n\nInstalling basic packages: We will go over how to install the necessary packages in order to run our analysis. This will include packages such as ‚Äúspmap‚Äù and ‚Äúgeo2xy‚Äù which will allow us to create maps in Stata.\nData types: We will discuss the different types of data that we will be working with in this lab. Specifically, we will be using time series data from a spreadsheet and map data from a shapefile. It is important to understand the structure and format of these data types in order to properly analyze and visualize them.\nBasic mapping: Once we have our data, we will learn how to draw a basic map using the ‚Äúmaps‚Äù and ‚Äúmaptools‚Äù packages. We will go over how to import the shapefile data, how to define the map scale, and how to add different layers to the map such as points, lines, and polygons.\n\nBy the end of this lab, you should have a solid understanding of how to install necessary packages, how to work with different types of data, and how to draw a basic map in Stata.\nüìäüó∫Ô∏èüíª Let‚Äôs get started!"
  },
  {
    "objectID": "labs/Lab-1.html#getting-started",
    "href": "labs/Lab-1.html#getting-started",
    "title": "Stata Lab 1 Mapping Growth: Basic maps",
    "section": "Getting started",
    "text": "Getting started\nGiven that you have encountered Stata previously in your studies, I will not spend undue time explaining the basics. If you want to brush up on Stata‚Äôs syntax, I reccomend having a look at these slides from Oscar Torres-Reyna, or this set of Youtube videos From Sebastian Wai.\n\nInstall additional programs and set-up\nFirst we need to install the packages in Stata that we will make use of. Please do this before our lab session in order to save time.\nWe use the ssc install command, as follows:\n\nssc install spmap, replace\nssc install geo2xy, replace\nssc install shp2dta, replace\nssc install schemepack, replace\nssc install scheme-burd, replace\nssc install colrspace, replace\nssc install palettes, replace\nssc install egenmore, replace\nssc install outreg2, replace\n\n\n\n\n\n\n\nNote\n\n\n\nTo run do-files click the ‚Äúrun-button‚Äù or highlight the lines of code and hit ctrl + D (Windows) or shift + cmd + D (Mac)\n\n\nRunning the command should produce output in the console that looks like this:\n\n. ssc install geo2xy, replace\n¬†¬†checking geo2xy consistency and verifying not already installed...\n¬†¬†installing into c:\\ado\\plus\\... installation complete.\n¬†¬†...\n\n\n\n\n\n\n\nAlways comment your code\n\n\n\nIn Stata you can comment your code in one line\n# like so\nOr if you want to write a longer string\n/*You can put your longer string of text inside a set of slashes and stars*/\n\n\n\nSetting a directory\nIt is useful to put all of your work inside a specific file directory. This way, Stata knows where to look for your files and where to save output, like regression tables.\nThe path to my folder where I have the files for this lab is:\nC:/Users/User/Documents/Recon/EOSE09/stata_files/\nIf you have a Mac, it will look something like this:\nUsers/Jonathan/Documents/Stata-lab/\nIf you want to change the settings on your Mac to display the file path in your Finder window, follow this link.\nTo tell Stata that this is where I want it to look for my files, I‚Äôll use the cd (current directory) command in my do-file.\n\ncd \"C:/Users/User/Documents/Recon/EOSE09/stata_files/\" # set your directory\n\nIf successful, in the console I will see the following output:\n\n. cd \"C:/Users/User/Documents/Recon/EOSE09/stata_files/\" # set your directory\n¬†¬†C:\\Users\\User\\Documents\\Recon\\EOSE09\\stata_files\n\nYou can call the help window by typing help into the console, and set your Stata version for compatability reasons with the version command, like so:\n\nhelp # Stata's help function; cf. also the web or Statalist\nversion 16.1 # version control"
  },
  {
    "objectID": "labs/Lab-1.html#data-types",
    "href": "labs/Lab-1.html#data-types",
    "title": "Stata Lab 1 Mapping Growth: Basic maps",
    "section": "Data types",
    "text": "Data types\nIn order to draw a map in Stata, we need to combine the information from our shapefile (which contains the geographic information such as the shape and location of the features on the map) with the information from our spreadsheet (which contains the data we want to display on the map, such as population or income).\nThe process of combining these two types of data is called ‚Äújoining‚Äù or ‚Äúmerging‚Äù and it allows us to link the attributes from the spreadsheet to the geographic features in the shapefile. Without joining the data, we would only have the shape of the features on the map, but not the information we want to display.\nYou are likely familiar with the first type of data, it is a wide dataset in an excel spreadsheet.\nThe second is a shapefile - a file that stores the information a software program needs to draw a map.\n\n\n\n\n\n\nShapefiles üó∫Ô∏èüìäüíªüìÇ\n\n\n\nA shapefile is a type of data file that is used to store geographic information, such as the location of streets, buildings, and other features on a map. It is a common format used in geographic information systems (GIS) software.\nA shapefile consists of four components with different file extensions:\n\n.shp (shapefile): This file stores the actual geometric data for the features in the map, such as the shape of a street or a building.\n.shx (shape index): This file stores the index of the geometric data in the .shp file, which is used to quickly access the data in the correct order.\n.dbf (database file): This file stores the attribute data for the features in the map, such as the name of a street or the population of a building.\n.prj (projection file): This file stores information about the coordinate system and projection used for the data in the shapefile. This is important for ensuring that the map is displayed correctly and that measurements are accurate.\n\nTogether, these four files make up a complete shapefile and are necessary to properly display and analyze the geographic information.\n\n\n\nImporting the Roses-Wolf dataset from Excel into Stata\nAt the moment, the database we want to use to draw our maps is in an excel sheet.\nIt has many tabs, and some lines are filled with headings before the data begins, as shown here:\n\n\n\nScreenshot of excel file\n\n\nWhat we want to do is import the data from each tab, and append it together.\n\nimport excel using RosesWolf_RegionalGDP_v6.xlsx, sheet(\"A1 Regional GDP\") firstrow cellrange(A6:O179) clear # import Excel sheet\n\nrename (D E F G H I J K L M N O) (year_1900 year_1910 year_1925 year_1938 year_1950 year_1960 year_1970 year_1980 year_1990 year_2000 year_2010 year_2015)\n\nThis is what the data now looks like inside Stata. It is a wide dataframe, with 173 rows (the number of regions) and 15 variables (3 identifiers and 12 years worth of data)\n\n\n\nScreenshot of Stata format\n\n\n\n\n\n\n\n\nTip\n\n\n\nRecall that the Roses Wolf database has geographic data on GDP and population at the nomenclature of territorial units 2 (NUTS-2) level, from 1900 to 2015.\nIf you want to have a look at this data in more detail, have a look at this Shiny app.\n\n\nNext we want to be sure that Stata is reading in the values as numbers rather than text. For this we use the destring command.\n\nimport excel using RosesWolf_RegionalGDP_v6.xlsx, sheet(\"A1 Regional GDP\") firstrow cellrange(A6:O179) clear allstring `# we import each sheet in the Excel file separately and save it as one file`\n\nrename (D E F G H I J K L M N O) (year_1900 year_1910 year_1925 year_1938 year_1950 year_1960 year_1970 year_1980 year_1990 year_2000 year_2010 year_2015)\n    destring year_*, replace\n\nIf there are non-numerical values in a string you cannot use destring and should not use the force-option as it would create missing values A better approach is to check all cases that are non-numerical and replace them (e.g.¬†change ‚Äúone‚Äù to ‚Äú1‚Äù)\nOther common data cleaning commands could include:\n# tab var1 if missing(real(var1)) # replace var1 ... if ... # destring var1, replace\nNext we want to take the data from a wide format to a long format. A long format means that each row is an observation, each column is a variable, and each cell has just one value in it.\n\n\n\nReshape graphic\n\n\nThe reshape command in Stata is used to change the shape of the data from one format to another. In this specific case, the reshape long option is used to change the data from a ‚Äúwide‚Äù format to a ‚Äúlong‚Äù format.\nThe variables that come after ‚Äúyear_‚Äù are the variables that will be converted from wide to long format. In this case, ‚Äúyear_‚Äù is not a variable, it is a prefix of the variables that will be reshaped.\nThe option i(NUTSCodes Region Countrycurrentborder) specifies the identifier variables, which are variables that uniquely identify the observations in the dataset and will not be reshaped. In this case, ‚ÄúNUTSCodes‚Äù, ‚ÄúRegion‚Äù, and ‚ÄúCountrycurrentborder‚Äù are the identifier variables.\nThe option j(year) specifies the variable that will be used as the new variable name for the reshaped variables. In this case, the new variable name will be ‚Äúyear‚Äù and it will be the identifier of the year of the data.\nWe save the data as a .dta file with the save command. The replace option overwrites any file with the same name in the directory.\n\nhelp reshape # Read up about the command here\nreshape long year_, i(NUTSCodes Region Countrycurrentborder) j(year)\nrename year_ regional_gdp_millions\nsave regional_gdp, replace \n\n\n\n\n\n\n\nTip\n\n\n\nNever overwrite your raw data - this could be a big problem if you haven‚Äôt saved it somewhere else. Good practice is to save a copy of your data in a different folder before the analysis, and make any changes through your do-file (e.g.¬†changing ‚Äúone‚Äù to ‚Äú1‚Äù in Stata rather than excel).\n\n\nNow we can see the data in a long format if we use the browse (br) command:\n\nWe repeat this process for the remaining sheets in the Excel workbook.\n\nimport excel using RosesWolf_RegionalGDP_v6.xlsx, sheet(\"A1b Regional GDP (2011PPP)\") firstrow cellrange(A6:O179) clear allstring # repetition of the steps above for each sheet\nrename (D E F G H I J K L M N O) (year_1900 year_1910 year_1925 year_1938 year_1950 year_1960 year_1970 year_1980 year_1990 year_2000 year_2010 year_2015)\ndestring year_*, replace\nreshape long year_, i(NUTSCodes Region Countrycurrentborder) j(year)\nrename year_ regional_gdp_2011_ppp_millions\nsave regional_gdp_2011_ppp, replace\n...\n\n\n\nImporting the shapefiles into Stata\nDescribe importing a shapefile into Stata\n\nclear # clear the dataset in memory\n    \nshp2dta using regions_nuts2, database(regions) coordinates(nutscoord) genid(_ID) replace\n\nNow we have a little data cleaning to do: There are three particular regions that need to be joined together in the Roses-Wolf database in order to be plotted correctly. If we don‚Äôt correct these, there will be holes in our map, as shown below:\n\n\n\nScreenshot from my Shiny app\n\n\n\nuse regions, clear # fixing the identifier of the NUTS_Codes so that the merge below works for all regions in the dataset\nreplace NUTS_CODE = \"AT12+AT13\" if NUTS_CODE == \"AT123\"\nreplace NUTS_CODE = \"DE71+DE72\" if NUTS_CODE == \"DE712\"\nreplace NUTS_CODE = \"DE91+DE92\" if NUTS_CODE == \"DE912\"\nsave regions, replace\n\n\nProjections\nMap projections are methods used to represent the surface of the Earth on a flat map. Different projections have different properties, such as preserving area, shape, or direction, and each has its own set of distortions. The Mercator projection is a cylindrical projection that was developed in the 16th century for navigation. It is particularly useful for representing the entire globe at once, but it distorts the size and shape of landmasses near the poles.\n\n\n\n\n\n\nMercator popularity\n\n\n\nWeb Mercator, also known as Google Web Mercator, Spherical Mercator, WGS 84 Web Mercator or WGS 84/Pseudo-Mercator, is a variant of the Mercator projection that is optimized for use on the web. It is the projection used by Google Maps, OpenStreetMap, and many other online mapping services.\n\n\n\nObligatory XKCD comic\n\n\nHave a look at this link to the Stata forum that explains different projections.\n\n\nWe will use the Albers projection, which is saved as nutscoord.dta in your working directory.\n\nuse nutscoord, clear # we use the Albers projection; every projection looks a bit different\n\nLet‚Äôs give a gander what the projection looks using the scatter command.\n\nscatter _Y _X\nscatter _Y _X, msize(tiny) msymbol(point)\n\n\n\n\n\n\n\n\n(a) Scatter with no options\n\n\n\n\n\n\n\n(b) Scatter specifying msize and msymbol\n\n\n\n\nFigure¬†1: Comparison of scatter plots\n\n\n\n\n\n\n\n\nScatter options\n\n\n\nThe msize() option in the scatter command is used to set the size of the markers in the graph. The markers can be circles, squares, or other shapes, and the size option controls their overall size. The value of the option can be a number, which represents the size in units of the graph, or a variable name, which represents the size relative to the values of that variable.\nThe msymbol() option in the scatter command is used to set the shape of the markers in the graph. The markers can be circles, squares, or other shapes, and the msymbol option controls their shape. The value of the option can be a number, which represents the shape, or a variable name, which represents the shape relative to the values of that variable.\n\n\nYou can experiment with other projections, have a look at the geo2xy help file:\n\nhelp geo2xy\n\n\n\n\nStata‚Äôs projections\n\n\n\n\n\nMerge shapefiles and data together\nWe‚Äôre nearly there! Now we have both file types in the correct format in Stata. All that is left to do is merge them together so that we can plot maps with the Roses-Wolf data.\nWe start by importing our clean, long format data.\n\nuse regional_gdp, clear # we merge all created files together\n\nWe are going to use the merge command. Read more about it by typing help merge into the console.\n\n\n\nMerge explained\n\n\n\n\n\n\n\n\nMerge types\n\n\n\n1:1 matches occur when each observation in one dataset has a unique match in the other dataset, based on the specified variable(s). This is the most common type of match and is the default behavior of the merge command.\n1:m matches occur when one observation in one dataset has multiple matches in the other dataset, based on the specified variable(s). This can happen when there are duplicate values in the specified variable(s) in one of the datasets.\nm:m matches occur when multiple observations in one dataset have multiple matches in the other dataset, based on the specified variable(s). This is the least common type of match, as it requires duplicate values in the specified variable(s) in both datasets.\n\n\n\nmerge 1:1 NUTSCodes year using regional_gdp_2011_ppp # this is a 1:1 merge\ndrop _merge\n\nYou should get output that looks like so:\n\n. merge 1:1 NUTSCodes year using regional_gdp_2011_ppp # this is a 1:1 merge\n¬†¬†¬†Result # of obs.\n¬†¬†¬†‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äì\n¬†¬†¬†not matched 0\n¬†¬†¬†matched 2,076 (_merge==3)\n¬†¬†¬†‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äì\n\nWe now repeat the process for all of our variables in the Roses-Wolf database.\n\nmerge 1:1 NUTSCodes year using population, assert(match) nogen\nmerge 1:1 NUTSCodes year using share_agriculture, assert(match) nogen\nmerge 1:1 NUTSCodes year using share_industry, assert(match) nogen\nmerge 1:1 NUTSCodes year using share_services, assert(match) nogen\n\nNow we add in area to all of the variables with an m:1 merge\n\nmerge m:1 NUTSCodes using area_km2, assert(match) nogen # this is a m:1 merge; there is also a 1:m merges; m:m merges are a bad idea\n\nLet‚Äôs fix our nomenclature\n\nrename NUTSCodes NUTS_CODE\nmerge m:1 NUTS_CODE using regions\n\nLet‚Äôd now drop all of the regions for which there is map information, but no data from the Roses-Wolf database.\n\ndrop if _merge == 2 # we keep all regions that are merged and delete those for which we have geographical information but no data\ndrop _merge\norder _ID, after(NUTS_CODE)\n\nWonderful! Now we have joined together our geographic information from the shapefiles with the data from the Roses-Wolf database."
  },
  {
    "objectID": "labs/Lab-1.html#formatting-and-creating-variables",
    "href": "labs/Lab-1.html#formatting-and-creating-variables",
    "title": "Stata Lab 1 Mapping Growth: Basic maps",
    "section": "Formatting and Creating Variables",
    "text": "Formatting and Creating Variables\nThis next section is first setting up some calculated variables (e.g.¬†dividing GDP by population for GDP per capita) and secondly adding nice names that are easy to understand what we are up to.\nWe start by renaming our variables from title case to snake case (where words are in lower case and separated by underscores)\n\nrename Countrycurrentborder country\n\nrename (Region regional_gdp_millions regional_gdp_2011_ppp_millions population_thousands area_km2) (region regional_gdp_1990 regional_gdp_2011 regional_population regional_area) # cleaning the dataset\n\nNext we change our GDP and population values from being denominated in millions and thousands to basic levels.\n\nreplace regional_gdp_1990 = regional_gdp_1990 * 1000000\nreplace regional_gdp_2011 = regional_gdp_2011 * 1000000\nreplace regional_population = regional_population * 1000\n\nNext we sum across countries and years to create a summary value for national GDP and national population from the regional values.\n\nbysort country year: egen national_gdp_1990 = total(regional_gdp_1990)\nbysort country year: egen national_population = total(regional_population)\n\nCreating per capita values at national and regional levels:\n\ngen national_gdp_cap_1990 = national_gdp_1990 / national_population\ngen regional_gdp_cap_1990 = regional_gdp_1990 / regional_population\ngen regional_gdp_cap_2011 = regional_gdp_2011 / regional_population\nsort country region year\n\nCreating a population density variable:\n\ngen population_density = regional_population / regional_area # you often have to calculate new variables, which you then can map\n\nNext we are going to make use of a very powerful command, egen , in combiation with the xtile command to create five groups of regions, based on their where they fall in percentile of regional GDP per capita, for every year which we have data on them.\n\negen q_regional_gdp_cap_1990 = xtile(regional_gdp_cap_1990), n(5) by(year) # you can change the number of groups\nsort country region year\n\nNow we are going to create a variable for GDP per capita at the regional level for each region, relative to the average of the entire sample.\n\nbysort year: egen mean_gdp_cap_eu = mean(regional_gdp_cap_1990)\nsort country region year\ngen relative_gdp_cap_eu = regional_gdp_cap_1990 / mean_gdp_cap_eu\n\nHere we do the same for the country level.\n\nbysort year country: egen mean_gdp_cap_country = mean(regional_gdp_cap_1990)\nsort country region year\ngen relative_gdp_cap_country = regional_gdp_cap_1990 / mean_gdp_cap_country\n\nFinally, we are going to add some nice labels so that when we draw our graphs they get nice legends by default.\nIn Stata you can have a variable name (e.g.¬†‚Äúcountry‚Äù), and a variable label (a long string e.g.¬†‚ÄúCountry in Current Borders‚Äù).\n\nlabel variable _ID \"Region ID\"\nlabel variable year \"Year\"\nlabel variable country \"Country in Current Borders\"\nlabel variable regional_gdp_1990 \"Regional GDP in 1990 International Dollars\"\nlabel variable regional_population \"Regional Population\"\nlabel variable employment_share_agriculture \"Regional Share of Employment in Agriculture\"\nlabel variable employment_share_industry \"Regional Share of Employment in Industry\"\nlabel variable employment_share_services \"Regional Share of Employment in Services\"\nlabel variable regional_area \"Area in KM2\"\nlabel variable national_gdp_1990 \"National GDP in 1990 International Dollars\"\nlabel variable national_gdp_cap_1990 \"National GDP per Capita in 1990 International Dollars\"\nlabel variable regional_gdp_cap_1990 \"Regional GDP per Capita in 1990 International Dollars\"\nlabel variable national_population \"National Population\"\n\nformat region NUTS_CODE %20s\n\nsave regional_dataset, replace"
  },
  {
    "objectID": "labs/Lab-1.html#summary-statistics",
    "href": "labs/Lab-1.html#summary-statistics",
    "title": "Stata Lab 1 Mapping Growth: Basic maps",
    "section": "Summary statistics",
    "text": "Summary statistics\nIn this section we use the tab and summarize commands to create summary statistics. To export our summary statistics, we use the outreg2 command.\n\nTab for summaries of categorical variables.\n\nuse regional_dataset, clear\n\ntab country\n\n\n\ntab region\n\n\n\nSummarize for summaries of numeric variables\n\nsummarize national_gdp_cap_1990 if year == 1950, detail\nsummarize regional_gdp_cap_1990 if year == 1950, detail\nsummarize regional_gdp_cap_1990 if year == 2000, detail\n\n\n\n\n\n\n\nTip\n\n\n\nYou can use the option , detail or simply , d after the summarize command to get summary values across the distribution, rather than just at the mean of the distribution.\n\n\n\n\nExporting summary tables\nHere the outreg2 command makes a table in MS Word format. To learn more about outreg2, see this link.\n\noutreg2 using sum_table.doc, replace sum(log) keep(regional_gdp_cap_1990) eqkeep(N mean sd) label\noutreg2 if year == 1950 using sum_table_1950.doc, replace sum(log) keep(regional_gdp_cap_1990) eqkeep(N mean sd) label\n\nWe can also use the browse command (shortened to br) to provide an easy to read summary within Stata.\n\nsort year regional_gdp_cap_1990\nbr region country regional_gdp_cap_1990 if year == 1900 # compare with \n\nWe can compare this summary with table 2.6 in the course book.\n\n\nbr region country regional_gdp_cap_1990 if year == 2010"
  },
  {
    "objectID": "labs/Lab-1.html#basic-maps",
    "href": "labs/Lab-1.html#basic-maps",
    "title": "Stata Lab 1 Mapping Growth: Basic maps",
    "section": "Basic maps",
    "text": "Basic maps\nNow we get to the fun part! Let‚Äôs load our nice and tidy dataset.\n\nuse regional_dataset, clear\n\nhelp spmap\n\n\n¬†¬†¬†¬†¬†¬†spmap is aimed at visualizing several kinds of spatial data, and is\n¬†¬†¬†¬†¬†¬†particularly suited for drawing thematic maps and displaying the results\n¬†¬†¬†¬†¬†¬†of spatial data analyses.\n\n\nBasic command\nHere we draw a map with just the outline of our regions. We use the nutscoord.dta file as our map.\n\nspmap using \"nutscoord.dta\" if year == 1950, id(_ID)\n\n\n\n\nAdding titles and notes\n\nspmap using \"nutscoord.dta\" if year == 1960, id(_ID) ///\n    title(\"My first Map\", size(large)) ///\n    note(\"Source: Ros√©s-Wolf (2020)\", size(vsmall) pos(5))\n\n\n\n\nIntroducing a fill\nLet‚Äôs now map the variable for National GDP per capita to the fill aesthetic for the year 1950.\n\nspmap national_gdp_cap_1990 using \"nutscoord.dta\" if year == 1950, id(_ID)\n\nNotice that we now get a legend in the bottom left hand corner that shows us what the different colours on the map mean. Look at Sweden and Denmark go!\n\n\n\nChange the colour palette\nHere we use the palette Blues2 to specify what colours we want to fill our base map polygons.\n\nspmap regional_gdp_cap_1990 using \"nutscoord.dta\" if year == 1950, id(_ID) fcolor(Blues2)\n\n\n\n\nChange the formatting of the legend\n\nspmap regional_gdp_cap_1990 using \"nutscoord.dta\" if year == 1950, id(_ID) fcolor(Blues2) legend(pos(9)) legstyle(2)\n\nThat‚Äôs a bit better! The numbers still look horrid though.\n\n\n\nFix legend formatting\n\nhelp format // you can format any variable\nformat regional_gdp_cap_1990 %12.0fc // 12 numbers left of the decimal point; 0 to the right; commas to denote thousands\nspmap regional_gdp_cap_1990 using \"nutscoord.dta\" if year == 1950, id(_ID) fcolor(Blues2) legend(pos(9)) legstyle(2)\n\n\n\n\n\n\n\nStata number formatting\n\n\n\nIn Stata, the number formatting for graphs is controlled by format codes.\nThe format code ‚Äú%12.0fc‚Äù is a combination of four parts:\n\n‚Äú%12‚Äù specifies the number of spaces to the left of the decimal point, in this case 12 spaces.\n‚Äú.0‚Äù specifies the number of decimal places to be displayed, in this case 0.\n‚Äúf‚Äù specifies the data type, in this case a floating point number\n‚Äúc‚Äù specifies the format of the number, in this case including commas as the thousands separator.\n\nIn general, format codes can be used to control the appearance of numbers in tables, graphs and other outputs in Stata. Each format code has a combination of width, decimal places and data type specifiers to format the numbers as desired.\n\n\nThat‚Äôs better!\n\n\n\nChange legend breaks and add a title\nLet‚Äôs make the numbers in the legend more logical:\n\n\n\n\n\n\nTip\n\n\n\nIn Stata, the clmethod() command is used to specify the method for creating breaks (or intervals) on a color scale in a graph. The clbreaks() command is used to specify the values of the breaks.\nIn this specific example, the command ‚Äúclmethod(custom) clbreaks(0 (1000) 12000)‚Äù is used to create a custom color scale with the following properties:\n\nThe scale starts at 0.\nThe gradations of the scale are 1,000.\nThe top end of the scale is 12,000.\n\nThe clbreaks() command is set to ‚Äú0 (1000) 12000‚Äù which means that the color scale starts at 0 and continues to increase in increments of 1,000 up to 12,000. In other words, the scale will have 12 breaks or intervals: 0, 1000, 2000, 3000, 4000, 5000, 6000, 7000, 8000, 9000, 10000, 11000, 12000.\nThis custom scale will be used to colour the data points in the graph accordingly.\nIt‚Äôs important to note that the command ‚Äúclmethod(custom)‚Äù is required to use the custom breaks defined in the ‚Äúclbreaks()‚Äù command.\n\n\nThe number of breaks is a stylistic choice and can impact the message that the reader takes away. Consider how the dark blue areas stand out in Sweden and the UK in the second figure, compared to the first.\n(I think you see by now what the graph editor looks like - I‚Äôm saving the image from the editor from now on.)\n\n\n\nspmap regional_gdp_cap_1990 using \"nutscoord.dta\" if year == 1950, id(_ID) fcolor(Blues2) legend(pos(9)) legstyle(2) ///\n    title(\"Regional GDP per Capita - 1950 \", size(medium)) ///\n    osize(0.02 ..) ocolor(gs8 ..) ///\n    clmethod(custom) clbreaks(0 (1000) 12000)\n\n\n\n\n\nLots of breaks\n\n\n\n\n\n\nspmap regional_gdp_cap_1990 using \"nutscoord.dta\" if year == 1950, id(_ID) fcolor(Blues2) legend(pos(9)) legstyle(1) ///\n    title(\"Regional GDP per Capita - 1950\", size(medium)) ///\n    osize(0.02 ..) ocolor(white ..) ///\n    clmethod(custom) clbreaks(0 3000 (1000) 6000 12000)\n\n\n\n\n\nFewer breaks\n\n\n\n\n\n\nComparison of breaks\n\n\n\n\n\nWhat do we do about the areas with no data?\nLet‚Äôs have a look at the employment share in industry.\nLook at the North of the UK in 1950 - such a powerhouse!\n\n\n\n\n\n\nTip\n\n\n\nThe ndfcolor(gray) command makes areas with no data greyed out (note the US spelling of gray vs grey)\n\n\n\nspmap employment_share_industry using \"nutscoord.dta\" if year == 1950, id(_ID) fcolor(Blues2) legend(pos(9)) legstyle(2) ///\n    title(\"Employment Share Industry - 1950\", size(medium)) ///\n    osize(0.02 ..) ocolor(white ..) ///\n    ndfcolor(gray) ndocolor(none ..) ndsize(0.02 ..)\n\nspmap employment_share_industry using \"nutscoord.dta\" if year == 1950, id(_ID) fcolor(Blues2) legend(pos(9)) legstyle(2) ///\n    title(\"Employment Share Industry - 1950\", size(medium)) ///\n    osize(0.02 ..) ocolor(white ..) ///\n    clmethod(custom) clbreaks(0 (0.2) 0.8) ///\n    ndfcolor(gray) ndocolor(none ..) ndsize(0.02 ..)\n    \nspmap employment_share_industry using \"nutscoord.dta\" if year == 1950, id(_ID) fcolor(Blues2) legstyle(2) ///\n    title(\"Employment Share Industry - 1950\", size(large)) ///\n    osize(0.02 ..) ocolor(white ..) ///\n    clmethod(custom) clbreaks(0 (0.2) 0.8) ///\n    legend(pos(9) size(medium) rowgap(1.5) label(5 \"60-80 %\") label(4 \"40-60 %\") ///\n    label(3 \"20-40 %\") label(2 \"0-20 %\") label(1 \"No data\")) ///\n    ndfcolor(gray) ndocolor(white ..) ndsize(0.02 ..)\n\n\n\n\n\n\n\nDefault legend\n\n\n\n\n\n\n\nBreaks by 20 percent\n\n\n\n\n\n\n\nA well formatted legend\n\n\n\n\n\n\nMore legend comparisons"
  },
  {
    "objectID": "labs/Lab-2.html",
    "href": "labs/Lab-2.html",
    "title": "Stata Lab 2 Mapping Growth: Across Space and Time",
    "section": "",
    "text": "To be added."
  },
  {
    "objectID": "resources/resources-scraper.html",
    "href": "resources/resources-scraper.html",
    "title": "Stata-resources",
    "section": "",
    "text": "Scrape website of Stata for resources and text to make a table.\n\nlibrary(tidyverse)\nlibrary(rvest)\n\nget_info <- function(url_in) {\n  url <- url_in\n\n  html <- read_html(url)\n\n  message(\"Getting info\")\n  titles <- html %>%\n    html_nodes(\"dt\") %>%\n    html_nodes(\"a\") %>%\n    html_text() %>%\n    str_squish() %>%\n    as_tibble() %>%\n    rename(title = value) %>%\n    mutate(rn = row_number())\n\n  links <- html %>%\n    html_nodes(\"dt\") %>%\n    html_nodes(\"a\") %>%\n    html_attr(\"href\") %>%\n    as_tibble() %>%\n    rename(link = value) %>%\n    mutate(rn = row_number())\n\n  descs <- html %>%\n    html_nodes(\"dd\") %>%\n    # html_nodes(\"a\") %>%\n    html_text() %>%\n    str_squish() %>%\n    as_tibble() %>%\n    rename(desc = value) %>%\n    filter(!str_detect(desc, \"[0-9]+ Users\")) %>%\n    mutate(rn = row_number())\n\n  df <- titles %>%\n    inner_join(links) %>%\n    inner_join(descs) %>%\n    select(-rn)\n\n  return(df)\n}\n\nresources <- get_info(\"https://www.stata.com/links/resources-for-learning-stata/\")\n\nresources %>% write_rds(\"resources/stata-resources.rds\")"
  },
  {
    "objectID": "resources/resources.html",
    "href": "resources/resources.html",
    "title": "Resources",
    "section": "",
    "text": "üî• Welcome to our page of resources for learning Stata, the powerful econometrics software used by researchers and analysts in many fields. üìö Here you will find a variety of materials to help you get started and become proficient in using Stata, including tutorials, documentation, and examples.ü§ì Whether you‚Äôre a beginner or an experienced user, these resources will help you make the most of this powerful toolüíªüìä.\n\nStata commands\nThis Stata tutorial from Oscar Torres Reyna.\n\n\nLinks to a bunch of resources from Stata\n\n\n\n\n\n\n  \n    \n      Resources to help you learn Stata\n    \n    \n      From the Stata website\n    \n  \n  \n    \n      Title and link\n      Description\n    \n  \n  \n    \nStata Online Training Page\n      \nA series of pages giving a step-by-step instruction in Stata. Topics start from basic Stata usage, and progress through common data management tasks through to using Stata for a wide variety of analysis topics.\n    \nStata Tutorial\n      \nA brief and informative introduction to Stata. There are also some nice notes about fitting generalized linear models using Stata.\n    \nStata cheat sheets\n      \nThese compact yet well-organized sheets cover everything you need, from syntax and data processing to plotting and programming, making them handy references to download for quick use.\n    \nArticles on Statistical Computing\n      \nA large collection of well-written and informative pages about a broad set of topics, including an in-depth Introduction to Stata for Researchers, and a careful treatment of Multiple Imputation in Stata.\n    \nResources to help you learn and use Stata\n      \nAn extensive resource of Stata information, including FAQs, learning modules, a quick-reference guide, annotated output, textbook examples, and more. Don't miss the Stata Web Books.\n    \nStata Highlights\n      \nExcerpts from Graduate Statistics I and Graduate Statistics II notes which highlight the use of Stata for solving various problems. In particular, there are some good pointers on interpreting predictive margins and marginal effects.\n    \nSocial Science Research, Stata & OS X Programming\n      \nPosts on research, Stata & OSX programming.\n    \nTips for using Stata\n      \nDescribes some tips to enhance your efficient use of Stata. New users may want to visit the Getting Started with Stata page.\n    \nInternet Guide to Stata\n      \nThis brief guide focuses on Stata for Windows.\n    \nThe Stata Guide\n      \nInformation on Stata, data visualizations, data management, and programming.\n    \nMultilevel Modelling\n      \nThere approximately 150 pages of materials covering fitting multilevel models for continuous and binary dependent variables in Stata using the xtmixed and xtmelogit commands. Users have to register to access the pdfs, datasets and do-files, but all materials are made freely available.\n    \nBiostatistics II\n      \nLecture notes from the second semester biostatistics class at Vanderbilt. These notes contain extensive screen shots of using the Stata menu system to do a wide range of statistical analyses common in the biostatistics world. The datasets used for the examples are also available, so that it is possible to work through the lessons and replicate the results.\n    \nStatistical Modelling in Stata\n      \nLecture notes, exercises and solutions for an introductory statistics course on basic statistical inference. The materials start with the basics and work up through introductory survival analysis.\n    \nIntroduction to Stata\n      \nA 67-page description of Stata, its key features and benefits, and other useful information.\n    \nAn Introduction to Stata\n      \nA series of video tutorials introducing Stata basics‚Äînavigating Stata's interface, inspecting and modifying data, and saving commands in a do-file.\n    \nVisualizing data using Stata\n      \nA series of videos for Stata graphics. These videos demonstrate how to create graphs such as histograms, box plots, bar graphs, scatterplots, and fitted regression lines, and they show how to customize the look of a graph.\n    \nThe Stata Project-Oriented Guide\n      \nA series of short tutorials covering the typical steps in a statistical project. The tutorials range from data management to automation with a dash of statistics and postestimation.\n    \nSurvival Analysis with Stata\n      \nLessons, programs, do-files, and a PDF book about survival analysis in Stata. (Updated June 2008)\n    \nRegression with Stata\n      \nThe Statistical Consulting Group at Academic Technology Services has created a ‚Äúweb book‚Äù covering a variety of topics on performing regression analysis with Stata. The book does not teach regression but gives examples showing how to use Stata for performing regression analysis. Written for Stata 7.\n    \nWorkshops on ‚ÄúAudit trails, reproducibility and output processing‚Äù and ‚ÄúEffective use of Stata Graphics‚Äù\n      \nWorkshop notes, Powerpoint presentations, data files, and do-files\n    \ngologit2\n      \nPrograms, readings, and documentation for generalized ordered logit and partial proportional-odds models for ordinal dependent variables (gologit2) and ordinal generalized linear models (oglm).\n    \noglm\n      \nAn introduction to Stata and various commands.\n    \nAn Introduction to Stata\n      \nMicroeconometrics class notes for use with Stata 10\n    \nShort Guides to Microeconometrics (with Stata commands)\n      \nWeekly video postings by StataCorp showing how to do common tasks in Stata.\n    \nStata video tutorials\n      \nNew to Stata? Sign up for the Ready, Set, Go Stata webinar. More experienced user? See the complete list of Stata webinars.\n    \nFree Stata webinars\n      \nNot Elsewhere Classified is the official Stata blog that has articles written by Stata developers and StataCorp staff on the use of Stata and other news related to the use of Stata.\n    \nThe Stata Blog\n      \nAnswers to the most frequently asked questions in statistics, data management, graphics, and operating system issues.\n    \nStata Technical Support FAQs\n      \nStatalist is a forum where over 40,000 Stata users from experts to neophytes maintain a lively dialogue about all things statistical and Stata.\n    \nStatalist\n      \nClassroom and web-based courses, on-site training courses, webinars, NetCourses, and more.\n    \nStata training\n      \nThe Stata Journal is a quarterly publication containing articles about statistics, data analysis, teaching methods, and effective use of Stata's language.\n    \nStata Journal\n      \nAlso see the Stata Technical Bulletin FAQ. Although the SJ superseded the STB, past STB issues contain valuable information. The FAQ includes information on how to obtain over the net the software associated with the published articles.\n    \nVisual overview for creating graphs\n      \nScroll through over 100 graphs that are broken out by category. Click on a graph to see the command that created it.\n    \nDanish Short Course Materials\n      \nDownload our cheat sheets for calling Python from Stata and our guide for working with dates and times in Stata.\n  \n  \n  \n\n\n\n\n\n\nUseful blog posts\nAsjad Naqvi‚Äôs mapping guide for Stata part 1\nAsjad Naqvi‚Äôs mapping guide for Stata part 2\nA World Bank blog on mapping in Stata\n\n\nYoutube channels\nSebastian Wai‚Äôs channel\n\n\nEconometrics Academy from Ani Katchova"
  }
]