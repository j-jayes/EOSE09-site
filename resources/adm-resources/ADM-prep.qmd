---
title: "ADM-Data-Prep"
execute: 
  eval: false
  echo: true
---

## Purpose

Ingest and collect together the data from [here](https://ec.europa.eu/eurostat/cache/RCI/#?vis=nuts2.scitech&lang=en)

```{r}
library(tidyverse)
library(readxl)
```

Prep: these are the years for each series.

```{r}
series_dates <- tribble(
  ~category, ~early, ~late,
  "economy", 2012, 2020,
  "population", 2011, 2020,
  "health", 2011, 2019,
  "education", 2013, 2021,
  "labour_market", 2012, 2021,
  "tourism", 2013, 2020,
  "digital_economy_and_society", 2012, 2021,
  "agriculture", 2012, 2021,
  "transport", 2012, 2020,
  "science_and_technology", 2011, 2020
)

series_dates <- series_dates %>% 
  pivot_longer(-category, values_to = "year") %>% 
  mutate(sheet = str_c(category, "_", name)) %>% 
  select(sheet, year)
```

Function to get data.

```{r}
get_data <- function(f_name, sheet_name) {
  message("Getting data from ", f_name)
  
  df <- readxl::read_excel(f_name, range = cell_rows(1:333))
  
  df %>%
    select(-sortOrder) %>%
    pivot_longer(-c("Region", "Code", "Country"), names_to = "indicator") %>%
    mutate(
      # remove brackets
      value = str_remove(value, "\\(.*"),
      # remove spaces
      value = str_remove_all(value, " "),
    ) %>%
    mutate(value = case_when(
      # replace pct sign
      str_detect(value, "%") ~ parse_number(value) / 100,
      # otherwise go numeric
      TRUE ~ as.numeric(value)
    )) %>% 
    mutate(stat_domain = sheet_name)
}
```

Get files in this chunk.

```{r}
list_of_files <- list.files(here::here("resources", "adm-resources"), pattern = ".xlsx")

tbl_of_files <- list_of_files %>% 
  as_tibble() %>% 
  filter(!str_detect(value, "regions_illustrated_excel.xlsx"),
  !str_detect(value, "urbanization.xlsx")) %>% 
  mutate(file_path = here::here("resources/adm-resources/", value),
         value = str_remove(value, "\\.xlsx")) %>% 
  rename(sheet = value)

tbl_of_files <- tbl_of_files %>% 
  mutate(data = pmap(list(file_path, sheet), get_data))

tbl_of_files <- tbl_of_files %>% 
  inner_join(series_dates)

df <- tbl_of_files %>% 
  unnest(data)

```


```{r}
df <- df %>%
  select(-c(sheet, file_path)) %>%
  mutate(
    period = str_extract(stat_domain, "early|late"),
    stat_domain = str_replace_all(stat_domain, "_", " "),
    stat_domain = str_remove(stat_domain, "early|late"),
    stat_domain = str_to_title(stat_domain),
    stat_domain = str_squish(stat_domain),
    indicator = str_squish(indicator)
  ) %>%
  janitor::clean_names() 

# series_to_distinct <- c(
#   "Population (persons)",
#   "Population density (persons per square kilometre)",
#   "Employment rate (% of population aged 20-64)",
#   "Unemployment rate (% of labour force aged 15-74)",
#   "Gross domestic product (PPS per inhabitant)",
#   "Gross domestic product (PPS per inhabitant in % of the EU-27 average)"
# )


# df_to_join <- df %>% 
#   filter(indicator %in% series_to_distinct) %>% 
#   distinct(region, code, country, indicator, .keep_all = T)

# df <- df %>% 
#   filter(!indicator %in% series_to_distinct) %>% 
#   bind_rows(df_to_join)

df <- df %>% 
  arrange(code, stat_domain, indicator, period)


df %>% write_rds(here::here("resources/adm-resources/regions_illustrated.rds"), compress = "gz")
df %>% 
  write_excel_csv(here::here("resources/adm-resources/regions_illustrated.csv"))

df <- readr::read_rds("resources/adm-resources/regions_illustrated.rds")

df %>% 
  write_excel_csv2("resources/adm-resources/regions_illustrated_excel.csv")
```


Fix Norway names

```{r}
df = df %>% 
mutate(region = case_when(
  str_detect(region, "2 016") ~ str_replace(region, "2 016", "2016"),
  TRUE ~ region
)) 
```


Make uniform with Roses and Wolf data

```{r}
#| eval: false

df_wide = df %>% 
rename(nuts_code = code)  %>% 
select(-c(stat_domain, year)) %>%
distinct() %>%
group_by(region, nuts_code, country, indicator, period) %>%
slice(1) %>% 
ungroup() %>%
pivot_wider(names_from = indicator, values_from = value)  %>% janitor::clean_names()  %>% 
filter(!is.na(nuts_code)) 

df_wide %>% 
count(nuts_code, country, sort = T)

shorten_var_names <- function(df, max_length = 32) {
  # Get the column names
  names <- colnames(df)
  
  # Abbreviate the names to the max_length
  short_names <- abbreviate(names, minlength = max_length)
  
  # Replace spaces with underscores
  short_names <- gsub(" ", "_", short_names)
  
  # Remove consecutive underscores
  short_names <- gsub("_+", "_", short_names)
  
  # If the name ends with an underscore, remove it
  short_names <- sub("_$", "", short_names)
  
  # Manually truncate the names if they are still too long
  short_names <- substr(short_names, 1, max_length)
  
  # Rename the columns in the data frame
  colnames(df) <- short_names
  
  return(df)
}

# Apply the function to your data frame
df_wide <- shorten_var_names(df_wide)

df_wide %>%
write_dta(here::here("resources", "stata", "eurostat_data_wide.dta"), version = 14)
```


```{r}

shorten_var_names <- function(names, max_length = 32) {
  # Abbreviate the names to the max_length
  short_names <- abbreviate(names, minlength = max_length)
  
  # Replace spaces with underscores
  short_names <- gsub(" ", "_", short_names)
  
  # Remove consecutive underscores
  short_names <- gsub("_+", "_", short_names)
  
  # If the name ends with an underscore, remove it
  short_names <- sub("_$", "", short_names)
  
  return(short_names)
}

# Your variable names
var_names <- c("region", "nuts_code", "country", "period", 
               "adult_participation_in_education_and_training_percent_of_population_aged_25_64", 
               "air_transport_of_freight_1_000_tonnes_loaded_and_unloaded", 
               "air_transport_of_passengers_1_000_passengers_arrivals_and_depatures")

# Apply the function
short_var_names <- shorten_var_names(var_names)

# Print the shortened variable names
print(short_var_names)


```

```{r}
library(haven)

stata <- read_dta(here::here("resources", 
                                    "adm-resources", 
                                    "RosesWolf_Regional_Fahad.dta"))

df <- readxl::read_excel(here::here("resources", 
                                    "adm-resources", 
                                    "urbanization.xlsx"), skip = 3) %>%
  janitor::clean_names()

df <- df %>%
  select(geo_codes, geo_labels, contains("pct")) %>% 
  rename_with(.cols = contains("pct"), .fn = ~ str_c(.x, "_2021"))

df %>% 
  rename(NUTS_CODE = geo_codes) %>% 
  filter(NUTS_CODE %in% stata$nuts) %>% 
  write_dta(here::here(
    "resources",
    "adm-resources",
    "urbanisation.dta"
  ))

stata <- stata %>% 
  left_join(df, by = c("nuts" = "geo_codes")) 

stata %>%
  filter(country == "Italy") %>%
  write_dta(here::here(
    "resources",
    "adm-resources",
    "RosesWolf_Regional_Added_pop_densiy.dta"
  ))
```





Check the shapefile

```{r}
library(sf)

shapefile <- st_read(here::here("resources", "stata", "NUTS_RG_20M_2021_4326.shp"))

shapefile  %>% 
filter(LEVL_CODE == 2) %>%
rename(nuts_code = NUTS_ID) %>%
st_write(here::here("resources", "stata", "NUTS_RG_20M_2021_4326_LEVL_CODE_2.shp"), append = F)

shapefile %>% 
count(LEVL_CODE)

shapefile %>% 
filter(LEVL_CODE == 2) %>%
ggplot(aes(geometry = geometry)) + 
  geom_sf()
```

